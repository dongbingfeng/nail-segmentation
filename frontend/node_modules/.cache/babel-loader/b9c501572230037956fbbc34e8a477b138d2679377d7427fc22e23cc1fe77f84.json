{"ast":null,"code":"var _jsxFileName = \"/Users/dongbingfeng/code/cursor_learn/nail-segmentation/frontend/src/components/ImageCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCanvas = ({\n  imageUrl,\n  annotations,\n  selectedTool,\n  onAnnotationCreate,\n  onAnnotationUpdate,\n  onAnnotationDelete,\n  onSamPointClick,\n  samPoints = [],\n  maskPoints = []\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPoint, setStartPoint] = useState(null);\n  const [currentRect, setCurrentRect] = useState(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [scale, setScale] = useState(1);\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // Load and setup image\n  useEffect(() => {\n    if (!imageUrl || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const img = new Image();\n    img.onload = () => {\n      imageRef.current = img;\n\n      // Set canvas size to match image size (no scaling)\n      canvas.width = img.width;\n      canvas.height = img.height;\n\n      // No scaling - display image at original size\n      setScale(1);\n      setOffset({\n        x: 0,\n        y: 0\n      });\n      setImageLoaded(true);\n      drawCanvas();\n    };\n    img.src = imageUrl;\n  }, [imageUrl]);\n\n  // Redraw canvas when annotations change\n  useEffect(() => {\n    if (imageLoaded) {\n      drawCanvas();\n    }\n  }, [annotations, imageLoaded, currentRect]);\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    const img = imageRef.current;\n    if (!canvas || !ctx || !img) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw image\n    ctx.drawImage(img, offset.x, offset.y, img.width * scale, img.height * scale);\n\n    // Draw existing annotations\n    annotations.forEach(annotation => {\n      if (annotation.type === 'bounding_box') {\n        const {\n          x,\n          y,\n          width = 0,\n          height = 0\n        } = annotation.coordinates;\n\n        // Convert image coordinates to canvas coordinates\n        const canvasX = offset.x + x * scale;\n        const canvasY = offset.y + y * scale;\n        const canvasWidth = width * scale;\n        const canvasHeight = height * scale;\n\n        // Draw bounding box\n        ctx.strokeStyle = '#ff0000';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(canvasX, canvasY, canvasWidth, canvasHeight);\n\n        // Draw label\n        ctx.fillStyle = '#ff0000';\n        ctx.font = '12px Arial';\n        ctx.fillText(annotation.label, canvasX, canvasY - 5);\n      } else if (annotation.type === 'segmentation' && annotation.coordinates.points) {\n        // Draw segmentation as polygon\n        const points = annotation.coordinates.points;\n        if (points.length > 2) {\n          ctx.beginPath();\n          const firstPoint = points[0];\n          ctx.moveTo(offset.x + firstPoint.x * scale, offset.y + firstPoint.y * scale);\n          for (let i = 1; i < points.length; i++) {\n            const point = points[i];\n            ctx.lineTo(offset.x + point.x * scale, offset.y + point.y * scale);\n          }\n          ctx.closePath();\n          ctx.fillStyle = 'rgba(255, 255, 0, 0.3)'; // Semi-transparent yellow\n          ctx.fill();\n          ctx.strokeStyle = '#ffeb3b';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n\n          // Draw label\n          ctx.fillStyle = '#ffeb3b';\n          ctx.font = '12px Arial';\n          ctx.fillText(annotation.label, offset.x + firstPoint.x * scale, offset.y + firstPoint.y * scale - 5);\n        }\n      }\n    });\n\n    // Draw SAM points\n    samPoints.forEach((samPoint, index) => {\n      const canvasX = offset.x + samPoint.x * scale;\n      const canvasY = offset.y + samPoint.y * scale;\n\n      // Draw point circle\n      ctx.beginPath();\n      ctx.arc(canvasX, canvasY, 6, 0, 2 * Math.PI);\n      ctx.fillStyle = samPoint.label === 1 ? '#4caf50' : '#f44336'; // Green for positive, red for negative\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Draw point number\n      ctx.fillStyle = '#fff';\n      ctx.font = 'bold 10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText((index + 1).toString(), canvasX, canvasY + 3);\n      ctx.textAlign = 'start'; // Reset alignment\n    });\n\n    // Draw mask points\n    maskPoints.forEach(maskPoint => {\n      const canvasX = offset.x + maskPoint.x * scale;\n      const canvasY = offset.y + maskPoint.y * scale;\n\n      // Draw point circle\n      ctx.beginPath();\n      ctx.arc(canvasX, canvasY, 1, 0, 2 * Math.PI);\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.1)'; // Semi-transparent green\n      ctx.fill();\n    });\n\n    // Draw current drawing rectangle\n    if (currentRect) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = currentRect;\n      ctx.strokeStyle = '#00ff00';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([5, 5]);\n      ctx.strokeRect(x, y, width, height);\n      ctx.setLineDash([]);\n    }\n  }, [annotations, currentRect, scale, offset, samPoints, maskPoints]);\n  const getMousePos = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return {\n      x: 0,\n      y: 0\n    };\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  };\n  const canvasToImageCoords = (canvasX, canvasY) => {\n    return {\n      x: (canvasX - offset.x) / scale,\n      y: (canvasY - offset.y) / scale\n    };\n  };\n  const handleMouseDown = e => {\n    if (selectedTool !== 'bounding_box') return;\n    const mousePos = getMousePos(e);\n    setIsDrawing(true);\n    setStartPoint(mousePos);\n    setCurrentRect(null);\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing || !startPoint || selectedTool !== 'bounding_box') return;\n    const mousePos = getMousePos(e);\n    const width = mousePos.x - startPoint.x;\n    const height = mousePos.y - startPoint.y;\n    setCurrentRect({\n      x: width >= 0 ? startPoint.x : mousePos.x,\n      y: height >= 0 ? startPoint.y : mousePos.y,\n      width: Math.abs(width),\n      height: Math.abs(height)\n    });\n  };\n  const handleMouseUp = e => {\n    if (!isDrawing || !startPoint || !currentRect || selectedTool !== 'bounding_box') return;\n\n    // Minimum rectangle size\n    if (currentRect.width < 10 || currentRect.height < 10) {\n      setIsDrawing(false);\n      setStartPoint(null);\n      setCurrentRect(null);\n      return;\n    }\n\n    // Convert canvas coordinates to image coordinates\n    const imageStart = canvasToImageCoords(currentRect.x, currentRect.y);\n    const imageEnd = canvasToImageCoords(currentRect.x + currentRect.width, currentRect.y + currentRect.height);\n\n    // Create annotation\n    const annotation = {\n      imageId: 'current-image',\n      type: 'bounding_box',\n      coordinates: {\n        x: Math.min(imageStart.x, imageEnd.x),\n        y: Math.min(imageStart.y, imageEnd.y),\n        width: Math.abs(imageEnd.x - imageStart.x),\n        height: Math.abs(imageEnd.y - imageStart.y)\n      },\n      label: `bbox-${annotations.length + 1}`\n    };\n    onAnnotationCreate(annotation);\n\n    // Reset drawing state\n    setIsDrawing(false);\n    setStartPoint(null);\n    setCurrentRect(null);\n  };\n  const handleAnnotationClick = e => {\n    if (selectedTool !== 'select') return;\n    const mousePos = getMousePos(e);\n    const imagePos = canvasToImageCoords(mousePos.x, mousePos.y);\n\n    // Find clicked annotation\n    const clickedAnnotation = annotations.find(annotation => {\n      if (annotation.type === 'bounding_box') {\n        const {\n          x,\n          y,\n          width = 0,\n          height = 0\n        } = annotation.coordinates;\n        return imagePos.x >= x && imagePos.x <= x + width && imagePos.y >= y && imagePos.y <= y + height;\n      }\n      return false;\n    });\n    if (clickedAnnotation) {\n      // For now, just log the clicked annotation\n      console.log('Clicked annotation:', clickedAnnotation);\n    }\n  };\n  const handleCanvasClick = e => {\n    if (selectedTool === 'select') {\n      handleAnnotationClick(e);\n    } else if (selectedTool === 'sam_point') {\n      const mousePos = getMousePos(e);\n      const imagePos = canvasToImageCoords(mousePos.x, mousePos.y);\n\n      // Determine if this is a positive or negative point (shift for negative)\n      const label = e.shiftKey ? 0 : 1; // 1 for positive, 0 for negative\n\n      console.log('SAM point clicked at:', imagePos, 'label:', label);\n      if (onSamPointClick) {\n        onSamPointClick(imagePos, label);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '1rem',\n      minHeight: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          border: '2px solid #ddd',\n          borderRadius: '8px',\n          backgroundColor: '#fff',\n          cursor: selectedTool === 'bounding_box' ? 'crosshair' : selectedTool === 'sam_point' ? 'pointer' : 'default',\n          maxWidth: 'none',\n          display: 'block'\n        },\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        onClick: handleCanvasClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        color: '#666',\n        backgroundColor: '#fff',\n        padding: '0.75rem',\n        borderRadius: '8px',\n        border: '1px solid #ddd'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: '0 0 0.5rem 0'\n        },\n        children: \"Interactive Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '0 0 0.5rem 0'\n        },\n        children: [\"Selected Tool: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedTool.replace('_', ' ').toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), selectedTool === 'bounding_box' && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '0',\n          fontSize: '0.9rem',\n          color: '#555'\n        },\n        children: \"Click and drag to draw a bounding box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this), selectedTool === 'sam_point' && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '0',\n          fontSize: '0.9rem',\n          color: '#555'\n        },\n        children: \"Click to add positive points, Shift+Click for negative points\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '0.5rem 0 0 0',\n          fontSize: '0.9rem',\n          color: '#666'\n        },\n        children: [\"Annotations: \", annotations.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCanvas, \"LXpFx53IoMQjW134yYKBdB7GQj0=\");\n_c = ImageCanvas;\nexport default ImageCanvas;\nvar _c;\n$RefreshReg$(_c, \"ImageCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","ImageCanvas","imageUrl","annotations","selectedTool","onAnnotationCreate","onAnnotationUpdate","onAnnotationDelete","onSamPointClick","samPoints","maskPoints","_s","canvasRef","imageRef","isDrawing","setIsDrawing","startPoint","setStartPoint","currentRect","setCurrentRect","imageLoaded","setImageLoaded","scale","setScale","offset","setOffset","x","y","current","canvas","ctx","getContext","img","Image","onload","width","height","drawCanvas","src","clearRect","drawImage","forEach","annotation","type","coordinates","canvasX","canvasY","canvasWidth","canvasHeight","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","label","points","length","beginPath","firstPoint","moveTo","i","point","lineTo","closePath","fill","stroke","samPoint","index","arc","Math","PI","textAlign","toString","maskPoint","setLineDash","getMousePos","e","rect","getBoundingClientRect","clientX","left","clientY","top","canvasToImageCoords","handleMouseDown","mousePos","handleMouseMove","abs","handleMouseUp","imageStart","imageEnd","imageId","min","handleAnnotationClick","imagePos","clickedAnnotation","find","console","log","handleCanvasClick","shiftKey","style","padding","minHeight","display","flexDirection","gap","children","justifyContent","alignItems","ref","border","borderRadius","backgroundColor","cursor","maxWidth","onMouseDown","onMouseMove","onMouseUp","onClick","fileName","_jsxFileName","lineNumber","columnNumber","color","margin","replace","toUpperCase","fontSize","_c","$RefreshReg$"],"sources":["/Users/dongbingfeng/code/cursor_learn/nail-segmentation/frontend/src/components/ImageCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface Annotation {\n  id: string;\n  imageId: string;\n  type: 'bounding_box' | 'segmentation';\n  coordinates: {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n    points?: Array<{x: number, y: number}>;\n  };\n  label: string;\n  confidence?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ImageCanvasProps {\n  imageUrl: string;\n  annotations: Annotation[];\n  selectedTool: 'select' | 'bounding_box' | 'sam_point' | 'sam_negative_point';\n  onAnnotationCreate: (annotation: Omit<Annotation, 'id' | 'createdAt' | 'updatedAt'>) => void;\n  onAnnotationUpdate: (id: string, annotation: Partial<Annotation>) => void;\n  onAnnotationDelete: (id: string) => void;\n  onSamPointClick?: (point: {x: number, y: number}, label: number) => void;\n  samPoints?: Array<{x: number, y: number, label: number}>;\n  maskPoints?: Array<{x: number, y: number}>;\n}\n\nconst ImageCanvas: React.FC<ImageCanvasProps> = ({\n  imageUrl,\n  annotations,\n  selectedTool,\n  onAnnotationCreate,\n  onAnnotationUpdate,\n  onAnnotationDelete,\n  onSamPointClick,\n  samPoints = [],\n  maskPoints = []\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const imageRef = useRef<HTMLImageElement>(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPoint, setStartPoint] = useState<{x: number, y: number} | null>(null);\n  const [currentRect, setCurrentRect] = useState<{x: number, y: number, width: number, height: number} | null>(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [scale, setScale] = useState(1);\n  const [offset, setOffset] = useState({x: 0, y: 0});\n\n  // Load and setup image\n  useEffect(() => {\n    if (!imageUrl || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const img = new Image();\n    img.onload = () => {\n      imageRef.current = img;\n      \n      // Set canvas size to match image size (no scaling)\n      canvas.width = img.width;\n      canvas.height = img.height;\n      \n      // No scaling - display image at original size\n      setScale(1);\n      setOffset({ x: 0, y: 0 });\n      setImageLoaded(true);\n      \n      drawCanvas();\n    };\n    \n    img.src = imageUrl;\n  }, [imageUrl]);\n\n  // Redraw canvas when annotations change\n  useEffect(() => {\n    if (imageLoaded) {\n      drawCanvas();\n    }\n  }, [annotations, imageLoaded, currentRect]);\n\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    const img = imageRef.current;\n    \n    if (!canvas || !ctx || !img) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Draw image\n    ctx.drawImage(img, offset.x, offset.y, img.width * scale, img.height * scale);\n    \n    // Draw existing annotations\n    annotations.forEach((annotation) => {\n      if (annotation.type === 'bounding_box') {\n        const { x, y, width = 0, height = 0 } = annotation.coordinates;\n        \n        // Convert image coordinates to canvas coordinates\n        const canvasX = offset.x + x * scale;\n        const canvasY = offset.y + y * scale;\n        const canvasWidth = width * scale;\n        const canvasHeight = height * scale;\n        \n        // Draw bounding box\n        ctx.strokeStyle = '#ff0000';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(canvasX, canvasY, canvasWidth, canvasHeight);\n        \n        // Draw label\n        ctx.fillStyle = '#ff0000';\n        ctx.font = '12px Arial';\n        ctx.fillText(annotation.label, canvasX, canvasY - 5);\n      } else if (annotation.type === 'segmentation' && annotation.coordinates.points) {\n        // Draw segmentation as polygon\n        const points = annotation.coordinates.points;\n        if (points.length > 2) {\n          ctx.beginPath();\n          const firstPoint = points[0];\n          ctx.moveTo(offset.x + firstPoint.x * scale, offset.y + firstPoint.y * scale);\n          \n          for (let i = 1; i < points.length; i++) {\n            const point = points[i];\n            ctx.lineTo(offset.x + point.x * scale, offset.y + point.y * scale);\n          }\n          \n          ctx.closePath();\n          ctx.fillStyle = 'rgba(255, 255, 0, 0.3)'; // Semi-transparent yellow\n          ctx.fill();\n          ctx.strokeStyle = '#ffeb3b';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n          \n          // Draw label\n          ctx.fillStyle = '#ffeb3b';\n          ctx.font = '12px Arial';\n          ctx.fillText(annotation.label, offset.x + firstPoint.x * scale, offset.y + firstPoint.y * scale - 5);\n        }\n      }\n    });\n    \n    // Draw SAM points\n    samPoints.forEach((samPoint, index) => {\n      const canvasX = offset.x + samPoint.x * scale;\n      const canvasY = offset.y + samPoint.y * scale;\n      \n      // Draw point circle\n      ctx.beginPath();\n      ctx.arc(canvasX, canvasY, 6, 0, 2 * Math.PI);\n      ctx.fillStyle = samPoint.label === 1 ? '#4caf50' : '#f44336'; // Green for positive, red for negative\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      \n      // Draw point number\n      ctx.fillStyle = '#fff';\n      ctx.font = 'bold 10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText((index + 1).toString(), canvasX, canvasY + 3);\n      ctx.textAlign = 'start'; // Reset alignment\n    });\n    \n    // Draw mask points\n    maskPoints.forEach((maskPoint) => {\n      const canvasX = offset.x + maskPoint.x * scale;\n      const canvasY = offset.y + maskPoint.y * scale;\n      \n      // Draw point circle\n      ctx.beginPath();\n      ctx.arc(canvasX, canvasY, 1, 0, 2 * Math.PI);\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.1)'; // Semi-transparent green\n      ctx.fill();\n    });\n    \n    // Draw current drawing rectangle\n    if (currentRect) {\n      const { x, y, width, height } = currentRect;\n      ctx.strokeStyle = '#00ff00';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([5, 5]);\n      ctx.strokeRect(x, y, width, height);\n      ctx.setLineDash([]);\n    }\n  }, [annotations, currentRect, scale, offset, samPoints, maskPoints]);\n\n  const getMousePos = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { x: 0, y: 0 };\n    \n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  };\n\n  const canvasToImageCoords = (canvasX: number, canvasY: number) => {\n    return {\n      x: (canvasX - offset.x) / scale,\n      y: (canvasY - offset.y) / scale\n    };\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (selectedTool !== 'bounding_box') return;\n    \n    const mousePos = getMousePos(e);\n    setIsDrawing(true);\n    setStartPoint(mousePos);\n    setCurrentRect(null);\n  };\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing || !startPoint || selectedTool !== 'bounding_box') return;\n    \n    const mousePos = getMousePos(e);\n    const width = mousePos.x - startPoint.x;\n    const height = mousePos.y - startPoint.y;\n    \n    setCurrentRect({\n      x: width >= 0 ? startPoint.x : mousePos.x,\n      y: height >= 0 ? startPoint.y : mousePos.y,\n      width: Math.abs(width),\n      height: Math.abs(height)\n    });\n  };\n\n  const handleMouseUp = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing || !startPoint || !currentRect || selectedTool !== 'bounding_box') return;\n    \n    // Minimum rectangle size\n    if (currentRect.width < 10 || currentRect.height < 10) {\n      setIsDrawing(false);\n      setStartPoint(null);\n      setCurrentRect(null);\n      return;\n    }\n    \n    // Convert canvas coordinates to image coordinates\n    const imageStart = canvasToImageCoords(currentRect.x, currentRect.y);\n    const imageEnd = canvasToImageCoords(currentRect.x + currentRect.width, currentRect.y + currentRect.height);\n    \n    // Create annotation\n    const annotation = {\n      imageId: 'current-image',\n      type: 'bounding_box' as const,\n      coordinates: {\n        x: Math.min(imageStart.x, imageEnd.x),\n        y: Math.min(imageStart.y, imageEnd.y),\n        width: Math.abs(imageEnd.x - imageStart.x),\n        height: Math.abs(imageEnd.y - imageStart.y)\n      },\n      label: `bbox-${annotations.length + 1}`\n    };\n    \n    onAnnotationCreate(annotation);\n    \n    // Reset drawing state\n    setIsDrawing(false);\n    setStartPoint(null);\n    setCurrentRect(null);\n  };\n\n  const handleAnnotationClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (selectedTool !== 'select') return;\n    \n    const mousePos = getMousePos(e);\n    const imagePos = canvasToImageCoords(mousePos.x, mousePos.y);\n    \n    // Find clicked annotation\n    const clickedAnnotation = annotations.find(annotation => {\n      if (annotation.type === 'bounding_box') {\n        const { x, y, width = 0, height = 0 } = annotation.coordinates;\n        return imagePos.x >= x && imagePos.x <= x + width &&\n               imagePos.y >= y && imagePos.y <= y + height;\n      }\n      return false;\n    });\n    \n    if (clickedAnnotation) {\n      // For now, just log the clicked annotation\n      console.log('Clicked annotation:', clickedAnnotation);\n    }\n  };\n\n  const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (selectedTool === 'select') {\n      handleAnnotationClick(e);\n    } else if (selectedTool === 'sam_point') {\n      const mousePos = getMousePos(e);\n      const imagePos = canvasToImageCoords(mousePos.x, mousePos.y);\n      \n      // Determine if this is a positive or negative point (shift for negative)\n      const label = e.shiftKey ? 0 : 1; // 1 for positive, 0 for negative\n      \n      console.log('SAM point clicked at:', imagePos, 'label:', label);\n      \n      if (onSamPointClick) {\n        onSamPointClick(imagePos, label);\n      }\n    }\n  };\n\n  return (\n    <div style={{ \n      padding: '1rem',\n      minHeight: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1rem'\n    }}>\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'flex-start',\n        alignItems: 'flex-start'\n      }}>\n        <canvas\n          ref={canvasRef}\n          style={{\n            border: '2px solid #ddd',\n            borderRadius: '8px',\n            backgroundColor: '#fff',\n            cursor: selectedTool === 'bounding_box' ? 'crosshair' : \n                    selectedTool === 'sam_point' ? 'pointer' : 'default',\n            maxWidth: 'none',\n            display: 'block'\n          }}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onClick={handleCanvasClick}\n        />\n      </div>\n      <div style={{\n        textAlign: 'center',\n        color: '#666',\n        backgroundColor: '#fff',\n        padding: '0.75rem',\n        borderRadius: '8px',\n        border: '1px solid #ddd'\n      }}>\n        <h3 style={{ margin: '0 0 0.5rem 0' }}>Interactive Canvas</h3>\n        <p style={{ margin: '0 0 0.5rem 0' }}>\n          Selected Tool: <strong>{selectedTool.replace('_', ' ').toUpperCase()}</strong>\n        </p>\n        {selectedTool === 'bounding_box' && (\n          <p style={{ margin: '0', fontSize: '0.9rem', color: '#555' }}>\n            Click and drag to draw a bounding box\n          </p>\n        )}\n        {selectedTool === 'sam_point' && (\n          <p style={{ margin: '0', fontSize: '0.9rem', color: '#555' }}>\n            Click to add positive points, Shift+Click for negative points\n          </p>\n        )}\n        <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.9rem', color: '#666' }}>\n          Annotations: {annotations.length}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageCanvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}