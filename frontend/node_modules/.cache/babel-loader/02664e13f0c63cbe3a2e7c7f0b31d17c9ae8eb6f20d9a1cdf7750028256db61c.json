{"ast":null,"code":"var _jsxFileName = \"/Users/dongbingfeng/code/cursor_learn/nail-segmentation/frontend/src/components/ImageCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCanvas = ({\n  imageUrl,\n  annotations,\n  selectedTool,\n  onAnnotationCreate,\n  onAnnotationUpdate,\n  onAnnotationDelete,\n  onSamPointClick,\n  samPoints = [],\n  maskPoints = [],\n  maskData = null\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n  const maskImageRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPoint, setStartPoint] = useState(null);\n  const [currentRect, setCurrentRect] = useState(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [maskLoaded, setMaskLoaded] = useState(false);\n  const [scale, setScale] = useState(1);\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // Load and setup image\n  useEffect(() => {\n    if (!imageUrl || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const img = new Image();\n    img.onload = () => {\n      imageRef.current = img;\n\n      // Set canvas size to match image size (no scaling)\n      canvas.width = img.width;\n      canvas.height = img.height;\n\n      // No scaling - display image at original size\n      setScale(1);\n      setOffset({\n        x: 0,\n        y: 0\n      });\n      setImageLoaded(true);\n      drawCanvas();\n    };\n    img.src = imageUrl;\n  }, [imageUrl]);\n\n  // Load and setup mask image\n  useEffect(() => {\n    if (!maskData) {\n      setMaskLoaded(false);\n      maskImageRef.current = null;\n      if (imageLoaded) {\n        drawCanvas();\n      }\n      return;\n    }\n    const maskImg = new Image();\n    maskImg.onload = () => {\n      maskImageRef.current = maskImg;\n      setMaskLoaded(true);\n      if (imageLoaded) {\n        drawCanvas();\n      }\n    };\n    maskImg.onerror = () => {\n      console.error('Failed to load mask image');\n      setMaskLoaded(false);\n      maskImageRef.current = null;\n    };\n\n    // Convert base64 to data URL\n    maskImg.src = `data:image/png;base64,${maskData}`;\n  }, [maskData, imageLoaded]);\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    const img = imageRef.current;\n    const maskImg = maskImageRef.current;\n    if (!canvas || !ctx || !img) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw image with full opacity\n    ctx.globalAlpha = 1.0;\n    ctx.drawImage(img, offset.x, offset.y, img.width * scale, img.height * scale);\n\n    // Draw mask overlay if available\n    if (maskImg && maskData) {\n      ctx.globalAlpha = 0.5; // Semi-transparent overlay\n      ctx.drawImage(maskImg, offset.x, offset.y, img.width * scale, img.height * scale);\n      ctx.globalAlpha = 1.0; // Reset opacity\n    }\n\n    // Draw existing annotations\n    annotations.forEach(annotation => {\n      if (annotation.type === 'bounding_box') {\n        const {\n          x,\n          y,\n          width = 0,\n          height = 0\n        } = annotation.coordinates;\n\n        // Convert image coordinates to canvas coordinates\n        const canvasX = offset.x + x * scale;\n        const canvasY = offset.y + y * scale;\n        const canvasWidth = width * scale;\n        const canvasHeight = height * scale;\n\n        // Draw bounding box\n        ctx.strokeStyle = '#ff0000';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(canvasX, canvasY, canvasWidth, canvasHeight);\n\n        // Draw label\n        ctx.fillStyle = '#ff0000';\n        ctx.font = '12px Arial';\n        ctx.fillText(annotation.label, canvasX, canvasY - 5);\n      } else if (annotation.type === 'segmentation' && annotation.coordinates.points) {\n        // Draw segmentation as polygon\n        const points = annotation.coordinates.points;\n        if (points.length > 2) {\n          ctx.beginPath();\n          const firstPoint = points[0];\n          ctx.moveTo(offset.x + firstPoint.x * scale, offset.y + firstPoint.y * scale);\n          for (let i = 1; i < points.length; i++) {\n            const point = points[i];\n            ctx.lineTo(offset.x + point.x * scale, offset.y + point.y * scale);\n          }\n          ctx.closePath();\n          ctx.fillStyle = 'rgba(255, 255, 0, 0.3)'; // Semi-transparent yellow\n          ctx.fill();\n          ctx.strokeStyle = '#ffeb3b';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n\n          // Draw label\n          ctx.fillStyle = '#ffeb3b';\n          ctx.font = '12px Arial';\n          ctx.fillText(annotation.label, offset.x + firstPoint.x * scale, offset.y + firstPoint.y * scale - 5);\n        }\n      }\n    });\n\n    // Draw SAM points\n    samPoints.forEach((samPoint, index) => {\n      const canvasX = offset.x + samPoint.x * scale;\n      const canvasY = offset.y + samPoint.y * scale;\n\n      // Draw point circle\n      ctx.beginPath();\n      ctx.arc(canvasX, canvasY, 6, 0, 2 * Math.PI);\n      ctx.fillStyle = samPoint.label === 1 ? '#4caf50' : '#f44336'; // Green for positive, red for negative\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Draw point number\n      ctx.fillStyle = '#fff';\n      ctx.font = 'bold 10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText((index + 1).toString(), canvasX, canvasY + 3);\n      ctx.textAlign = 'start'; // Reset alignment\n    });\n\n    // Draw mask points\n    maskPoints.forEach(maskPoint => {\n      const canvasX = offset.x + maskPoint.x * scale;\n      const canvasY = offset.y + maskPoint.y * scale;\n\n      // Draw point circle\n      ctx.beginPath();\n      ctx.arc(canvasX, canvasY, 1, 0, 2 * Math.PI);\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.1)'; // Semi-transparent green\n      ctx.fill();\n    });\n\n    // Draw current drawing rectangle\n    if (currentRect) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = currentRect;\n      ctx.strokeStyle = '#00ff00';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([5, 5]);\n      ctx.strokeRect(x, y, width, height);\n      ctx.setLineDash([]);\n    }\n  }, [annotations, currentRect, scale, offset, samPoints, maskPoints, maskData]);\n\n  // Redraw canvas when annotations, samPoints, or maskPoints change\n  useEffect(() => {\n    if (imageLoaded) {\n      drawCanvas();\n    }\n  }, [imageLoaded, drawCanvas]);\n  const getMousePos = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return {\n      x: 0,\n      y: 0\n    };\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  };\n  const canvasToImageCoords = (canvasX, canvasY) => {\n    return {\n      x: (canvasX - offset.x) / scale,\n      y: (canvasY - offset.y) / scale\n    };\n  };\n  const handleMouseDown = e => {\n    if (selectedTool !== 'bounding_box') return;\n    const mousePos = getMousePos(e);\n    setIsDrawing(true);\n    setStartPoint(mousePos);\n    setCurrentRect(null);\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing || !startPoint || selectedTool !== 'bounding_box') return;\n    const mousePos = getMousePos(e);\n    const width = mousePos.x - startPoint.x;\n    const height = mousePos.y - startPoint.y;\n    setCurrentRect({\n      x: width >= 0 ? startPoint.x : mousePos.x,\n      y: height >= 0 ? startPoint.y : mousePos.y,\n      width: Math.abs(width),\n      height: Math.abs(height)\n    });\n  };\n  const handleMouseUp = e => {\n    if (!isDrawing || !startPoint || !currentRect || selectedTool !== 'bounding_box') return;\n\n    // Minimum rectangle size\n    if (currentRect.width < 10 || currentRect.height < 10) {\n      setIsDrawing(false);\n      setStartPoint(null);\n      setCurrentRect(null);\n      return;\n    }\n\n    // Convert canvas coordinates to image coordinates\n    const imageStart = canvasToImageCoords(currentRect.x, currentRect.y);\n    const imageEnd = canvasToImageCoords(currentRect.x + currentRect.width, currentRect.y + currentRect.height);\n\n    // Create annotation\n    const annotation = {\n      imageId: 'current-image',\n      type: 'bounding_box',\n      coordinates: {\n        x: Math.min(imageStart.x, imageEnd.x),\n        y: Math.min(imageStart.y, imageEnd.y),\n        width: Math.abs(imageEnd.x - imageStart.x),\n        height: Math.abs(imageEnd.y - imageStart.y)\n      },\n      label: `bbox-${annotations.length + 1}`\n    };\n    onAnnotationCreate(annotation);\n\n    // Reset drawing state\n    setIsDrawing(false);\n    setStartPoint(null);\n    setCurrentRect(null);\n  };\n  const handleAnnotationClick = e => {\n    if (selectedTool !== 'select') return;\n    const mousePos = getMousePos(e);\n    const imagePos = canvasToImageCoords(mousePos.x, mousePos.y);\n\n    // Find clicked annotation\n    const clickedAnnotation = annotations.find(annotation => {\n      if (annotation.type === 'bounding_box') {\n        const {\n          x,\n          y,\n          width = 0,\n          height = 0\n        } = annotation.coordinates;\n        return imagePos.x >= x && imagePos.x <= x + width && imagePos.y >= y && imagePos.y <= y + height;\n      }\n      return false;\n    });\n    if (clickedAnnotation) {\n      // For now, just log the clicked annotation\n      console.log('Clicked annotation:', clickedAnnotation);\n    }\n  };\n  const handleCanvasClick = e => {\n    if (selectedTool === 'select') {\n      handleAnnotationClick(e);\n    } else if (selectedTool === 'sam_point') {\n      const mousePos = getMousePos(e);\n      const imagePos = canvasToImageCoords(mousePos.x, mousePos.y);\n\n      // Determine if this is a positive or negative point (shift for negative)\n      const label = e.shiftKey ? 0 : 1; // 1 for positive, 0 for negative\n\n      console.log('SAM point clicked at:', imagePos, 'label:', label);\n      if (onSamPointClick) {\n        onSamPointClick(imagePos, label);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '1rem',\n      minHeight: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          border: '2px solid #ddd',\n          borderRadius: '8px',\n          backgroundColor: '#fff',\n          cursor: selectedTool === 'bounding_box' ? 'crosshair' : selectedTool === 'sam_point' ? 'pointer' : 'default',\n          maxWidth: 'none',\n          display: 'block'\n        },\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        onClick: handleCanvasClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        color: '#666',\n        backgroundColor: '#fff',\n        padding: '0.75rem',\n        borderRadius: '8px',\n        border: '1px solid #ddd'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: '0 0 0.5rem 0'\n        },\n        children: \"Interactive Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '0 0 0.5rem 0'\n        },\n        children: [\"Selected Tool: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedTool.replace('_', ' ').toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), selectedTool === 'bounding_box' && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '0',\n          fontSize: '0.9rem',\n          color: '#555'\n        },\n        children: \"Click and drag to draw a bounding box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this), selectedTool === 'sam_point' && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '0',\n          fontSize: '0.9rem',\n          color: '#555'\n        },\n        children: \"Click to add positive points, Shift+Click for negative points\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '0.5rem 0 0 0',\n          fontSize: '0.9rem',\n          color: '#666'\n        },\n        children: [\"Annotations: \", annotations.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCanvas, \"Ud6Wq2ZRobNlamN2yVx1XtmBxlM=\");\n_c = ImageCanvas;\nexport default ImageCanvas;\nvar _c;\n$RefreshReg$(_c, \"ImageCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","ImageCanvas","imageUrl","annotations","selectedTool","onAnnotationCreate","onAnnotationUpdate","onAnnotationDelete","onSamPointClick","samPoints","maskPoints","maskData","_s","canvasRef","imageRef","maskImageRef","isDrawing","setIsDrawing","startPoint","setStartPoint","currentRect","setCurrentRect","imageLoaded","setImageLoaded","maskLoaded","setMaskLoaded","scale","setScale","offset","setOffset","x","y","current","canvas","ctx","getContext","img","Image","onload","width","height","drawCanvas","src","maskImg","onerror","console","error","clearRect","globalAlpha","drawImage","forEach","annotation","type","coordinates","canvasX","canvasY","canvasWidth","canvasHeight","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","label","points","length","beginPath","firstPoint","moveTo","i","point","lineTo","closePath","fill","stroke","samPoint","index","arc","Math","PI","textAlign","toString","maskPoint","setLineDash","getMousePos","e","rect","getBoundingClientRect","clientX","left","clientY","top","canvasToImageCoords","handleMouseDown","mousePos","handleMouseMove","abs","handleMouseUp","imageStart","imageEnd","imageId","min","handleAnnotationClick","imagePos","clickedAnnotation","find","log","handleCanvasClick","shiftKey","style","padding","minHeight","display","flexDirection","gap","children","justifyContent","alignItems","ref","border","borderRadius","backgroundColor","cursor","maxWidth","onMouseDown","onMouseMove","onMouseUp","onClick","fileName","_jsxFileName","lineNumber","columnNumber","color","margin","replace","toUpperCase","fontSize","_c","$RefreshReg$"],"sources":["/Users/dongbingfeng/code/cursor_learn/nail-segmentation/frontend/src/components/ImageCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface Annotation {\n  id: string;\n  imageId: string;\n  type: 'bounding_box' | 'segmentation';\n  coordinates: {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n    points?: Array<{x: number, y: number}>;\n  };\n  label: string;\n  confidence?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ImageCanvasProps {\n  imageUrl: string;\n  annotations: Annotation[];\n  selectedTool: 'select' | 'bounding_box' | 'sam_point';\n  onAnnotationCreate: (annotation: Omit<Annotation, 'id' | 'createdAt' | 'updatedAt'>) => void;\n  onAnnotationUpdate: (id: string, annotation: Partial<Annotation>) => void;\n  onAnnotationDelete: (id: string) => void;\n  onSamPointClick?: (point: {x: number, y: number}, label: number) => void;\n  samPoints?: Array<{x: number, y: number, label: number}>;\n  maskPoints?: Array<{x: number, y: number}>;\n  maskData?: string | null;\n}\n\nconst ImageCanvas: React.FC<ImageCanvasProps> = ({\n  imageUrl,\n  annotations,\n  selectedTool,\n  onAnnotationCreate,\n  onAnnotationUpdate,\n  onAnnotationDelete,\n  onSamPointClick,\n  samPoints = [],\n  maskPoints = [],\n  maskData = null\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const imageRef = useRef<HTMLImageElement>(null);\n  const maskImageRef = useRef<HTMLImageElement>(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPoint, setStartPoint] = useState<{x: number, y: number} | null>(null);\n  const [currentRect, setCurrentRect] = useState<{x: number, y: number, width: number, height: number} | null>(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [maskLoaded, setMaskLoaded] = useState(false);\n  const [scale, setScale] = useState(1);\n  const [offset, setOffset] = useState({x: 0, y: 0});\n\n  // Load and setup image\n  useEffect(() => {\n    if (!imageUrl || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const img = new Image();\n    img.onload = () => {\n      imageRef.current = img;\n      \n      // Set canvas size to match image size (no scaling)\n      canvas.width = img.width;\n      canvas.height = img.height;\n      \n      // No scaling - display image at original size\n      setScale(1);\n      setOffset({ x: 0, y: 0 });\n      setImageLoaded(true);\n      \n      drawCanvas();\n    };\n    \n    img.src = imageUrl;\n  }, [imageUrl]);\n\n  // Load and setup mask image\n  useEffect(() => {\n    if (!maskData) {\n      setMaskLoaded(false);\n      maskImageRef.current = null;\n      if (imageLoaded) {\n        drawCanvas();\n      }\n      return;\n    }\n\n    const maskImg = new Image();\n    maskImg.onload = () => {\n      maskImageRef.current = maskImg;\n      setMaskLoaded(true);\n      if (imageLoaded) {\n        drawCanvas();\n      }\n    };\n    \n    maskImg.onerror = () => {\n      console.error('Failed to load mask image');\n      setMaskLoaded(false);\n      maskImageRef.current = null;\n    };\n    \n    // Convert base64 to data URL\n    maskImg.src = `data:image/png;base64,${maskData}`;\n  }, [maskData, imageLoaded]);\n\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    const img = imageRef.current;\n    const maskImg = maskImageRef.current;\n    \n    if (!canvas || !ctx || !img) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Draw image with full opacity\n    ctx.globalAlpha = 1.0;\n    ctx.drawImage(img, offset.x, offset.y, img.width * scale, img.height * scale);\n    \n    // Draw mask overlay if available\n    if (maskImg && maskData) {\n      ctx.globalAlpha = 0.5; // Semi-transparent overlay\n      ctx.drawImage(maskImg, offset.x, offset.y, img.width * scale, img.height * scale);\n      ctx.globalAlpha = 1.0; // Reset opacity\n    }\n    \n    // Draw existing annotations\n    annotations.forEach((annotation) => {\n      if (annotation.type === 'bounding_box') {\n        const { x, y, width = 0, height = 0 } = annotation.coordinates;\n        \n        // Convert image coordinates to canvas coordinates\n        const canvasX = offset.x + x * scale;\n        const canvasY = offset.y + y * scale;\n        const canvasWidth = width * scale;\n        const canvasHeight = height * scale;\n        \n        // Draw bounding box\n        ctx.strokeStyle = '#ff0000';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(canvasX, canvasY, canvasWidth, canvasHeight);\n        \n        // Draw label\n        ctx.fillStyle = '#ff0000';\n        ctx.font = '12px Arial';\n        ctx.fillText(annotation.label, canvasX, canvasY - 5);\n      } else if (annotation.type === 'segmentation' && annotation.coordinates.points) {\n        // Draw segmentation as polygon\n        const points = annotation.coordinates.points;\n        if (points.length > 2) {\n          ctx.beginPath();\n          const firstPoint = points[0];\n          ctx.moveTo(offset.x + firstPoint.x * scale, offset.y + firstPoint.y * scale);\n          \n          for (let i = 1; i < points.length; i++) {\n            const point = points[i];\n            ctx.lineTo(offset.x + point.x * scale, offset.y + point.y * scale);\n          }\n          \n          ctx.closePath();\n          ctx.fillStyle = 'rgba(255, 255, 0, 0.3)'; // Semi-transparent yellow\n          ctx.fill();\n          ctx.strokeStyle = '#ffeb3b';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n          \n          // Draw label\n          ctx.fillStyle = '#ffeb3b';\n          ctx.font = '12px Arial';\n          ctx.fillText(annotation.label, offset.x + firstPoint.x * scale, offset.y + firstPoint.y * scale - 5);\n        }\n      }\n    });\n    \n    // Draw SAM points\n    samPoints.forEach((samPoint, index) => {\n      const canvasX = offset.x + samPoint.x * scale;\n      const canvasY = offset.y + samPoint.y * scale;\n      \n      // Draw point circle\n      ctx.beginPath();\n      ctx.arc(canvasX, canvasY, 6, 0, 2 * Math.PI);\n      ctx.fillStyle = samPoint.label === 1 ? '#4caf50' : '#f44336'; // Green for positive, red for negative\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      \n      // Draw point number\n      ctx.fillStyle = '#fff';\n      ctx.font = 'bold 10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText((index + 1).toString(), canvasX, canvasY + 3);\n      ctx.textAlign = 'start'; // Reset alignment\n    });\n    \n    // Draw mask points\n    maskPoints.forEach((maskPoint) => {\n      const canvasX = offset.x + maskPoint.x * scale;\n      const canvasY = offset.y + maskPoint.y * scale;\n      \n      // Draw point circle\n      ctx.beginPath();\n      ctx.arc(canvasX, canvasY, 1, 0, 2 * Math.PI);\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.1)'; // Semi-transparent green\n      ctx.fill();\n    });\n    \n    // Draw current drawing rectangle\n    if (currentRect) {\n      const { x, y, width, height } = currentRect;\n      ctx.strokeStyle = '#00ff00';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([5, 5]);\n      ctx.strokeRect(x, y, width, height);\n      ctx.setLineDash([]);\n    }\n  }, [annotations, currentRect, scale, offset, samPoints, maskPoints, maskData]);\n\n  // Redraw canvas when annotations, samPoints, or maskPoints change\n  useEffect(() => {\n    if (imageLoaded) {\n      drawCanvas();\n    }\n  }, [imageLoaded, drawCanvas]);\n\n  const getMousePos = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { x: 0, y: 0 };\n    \n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  };\n\n  const canvasToImageCoords = (canvasX: number, canvasY: number) => {\n    return {\n      x: (canvasX - offset.x) / scale,\n      y: (canvasY - offset.y) / scale\n    };\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (selectedTool !== 'bounding_box') return;\n    \n    const mousePos = getMousePos(e);\n    setIsDrawing(true);\n    setStartPoint(mousePos);\n    setCurrentRect(null);\n  };\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing || !startPoint || selectedTool !== 'bounding_box') return;\n    \n    const mousePos = getMousePos(e);\n    const width = mousePos.x - startPoint.x;\n    const height = mousePos.y - startPoint.y;\n    \n    setCurrentRect({\n      x: width >= 0 ? startPoint.x : mousePos.x,\n      y: height >= 0 ? startPoint.y : mousePos.y,\n      width: Math.abs(width),\n      height: Math.abs(height)\n    });\n  };\n\n  const handleMouseUp = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing || !startPoint || !currentRect || selectedTool !== 'bounding_box') return;\n    \n    // Minimum rectangle size\n    if (currentRect.width < 10 || currentRect.height < 10) {\n      setIsDrawing(false);\n      setStartPoint(null);\n      setCurrentRect(null);\n      return;\n    }\n    \n    // Convert canvas coordinates to image coordinates\n    const imageStart = canvasToImageCoords(currentRect.x, currentRect.y);\n    const imageEnd = canvasToImageCoords(currentRect.x + currentRect.width, currentRect.y + currentRect.height);\n    \n    // Create annotation\n    const annotation = {\n      imageId: 'current-image',\n      type: 'bounding_box' as const,\n      coordinates: {\n        x: Math.min(imageStart.x, imageEnd.x),\n        y: Math.min(imageStart.y, imageEnd.y),\n        width: Math.abs(imageEnd.x - imageStart.x),\n        height: Math.abs(imageEnd.y - imageStart.y)\n      },\n      label: `bbox-${annotations.length + 1}`\n    };\n    \n    onAnnotationCreate(annotation);\n    \n    // Reset drawing state\n    setIsDrawing(false);\n    setStartPoint(null);\n    setCurrentRect(null);\n  };\n\n  const handleAnnotationClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (selectedTool !== 'select') return;\n    \n    const mousePos = getMousePos(e);\n    const imagePos = canvasToImageCoords(mousePos.x, mousePos.y);\n    \n    // Find clicked annotation\n    const clickedAnnotation = annotations.find(annotation => {\n      if (annotation.type === 'bounding_box') {\n        const { x, y, width = 0, height = 0 } = annotation.coordinates;\n        return imagePos.x >= x && imagePos.x <= x + width &&\n               imagePos.y >= y && imagePos.y <= y + height;\n      }\n      return false;\n    });\n    \n    if (clickedAnnotation) {\n      // For now, just log the clicked annotation\n      console.log('Clicked annotation:', clickedAnnotation);\n    }\n  };\n\n  const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (selectedTool === 'select') {\n      handleAnnotationClick(e);\n    } else if (selectedTool === 'sam_point') {\n      const mousePos = getMousePos(e);\n      const imagePos = canvasToImageCoords(mousePos.x, mousePos.y);\n      \n      // Determine if this is a positive or negative point (shift for negative)\n      const label = e.shiftKey ? 0 : 1; // 1 for positive, 0 for negative\n      \n      console.log('SAM point clicked at:', imagePos, 'label:', label);\n      \n      if (onSamPointClick) {\n        onSamPointClick(imagePos, label);\n      }\n    }\n  };\n\n  return (\n    <div style={{ \n      padding: '1rem',\n      minHeight: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1rem'\n    }}>\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'flex-start',\n        alignItems: 'flex-start'\n      }}>\n        <canvas\n          ref={canvasRef}\n          style={{\n            border: '2px solid #ddd',\n            borderRadius: '8px',\n            backgroundColor: '#fff',\n            cursor: selectedTool === 'bounding_box' ? 'crosshair' : \n                    selectedTool === 'sam_point' ? 'pointer' : 'default',\n            maxWidth: 'none',\n            display: 'block'\n          }}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onClick={handleCanvasClick}\n        />\n      </div>\n      <div style={{\n        textAlign: 'center',\n        color: '#666',\n        backgroundColor: '#fff',\n        padding: '0.75rem',\n        borderRadius: '8px',\n        border: '1px solid #ddd'\n      }}>\n        <h3 style={{ margin: '0 0 0.5rem 0' }}>Interactive Canvas</h3>\n        <p style={{ margin: '0 0 0.5rem 0' }}>\n          Selected Tool: <strong>{selectedTool.replace('_', ' ').toUpperCase()}</strong>\n        </p>\n        {selectedTool === 'bounding_box' && (\n          <p style={{ margin: '0', fontSize: '0.9rem', color: '#555' }}>\n            Click and drag to draw a bounding box\n          </p>\n        )}\n        {selectedTool === 'sam_point' && (\n          <p style={{ margin: '0', fontSize: '0.9rem', color: '#555' }}>\n            Click to add positive points, Shift+Click for negative points\n          </p>\n        )}\n        <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.9rem', color: '#666' }}>\n          Annotations: {annotations.length}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageCanvas; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAgCxE,MAAMC,WAAuC,GAAGA,CAAC;EAC/CC,QAAQ;EACRC,WAAW;EACXC,YAAY;EACZC,kBAAkB;EAClBC,kBAAkB;EAClBC,kBAAkB;EAClBC,eAAe;EACfC,SAAS,GAAG,EAAE;EACdC,UAAU,GAAG,EAAE;EACfC,QAAQ,GAAG;AACb,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGlB,MAAM,CAAoB,IAAI,CAAC;EACjD,MAAMmB,QAAQ,GAAGnB,MAAM,CAAmB,IAAI,CAAC;EAC/C,MAAMoB,YAAY,GAAGpB,MAAM,CAAmB,IAAI,CAAC;EACnD,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAgC,IAAI,CAAC;EACjF,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAA+D,IAAI,CAAC;EAClH,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC2B,UAAU,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC6B,KAAK,EAAEC,QAAQ,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC+B,MAAM,EAAEC,SAAS,CAAC,GAAGhC,QAAQ,CAAC;IAACiC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAC,CAAC,CAAC;;EAElD;EACAnC,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,IAAI,CAACW,SAAS,CAACmB,OAAO,EAAE;IAErC,MAAMC,MAAM,GAAGpB,SAAS,CAACmB,OAAO;IAChC,MAAME,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAME,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvBD,GAAG,CAACE,MAAM,GAAG,MAAM;MACjBxB,QAAQ,CAACkB,OAAO,GAAGI,GAAG;;MAEtB;MACAH,MAAM,CAACM,KAAK,GAAGH,GAAG,CAACG,KAAK;MACxBN,MAAM,CAACO,MAAM,GAAGJ,GAAG,CAACI,MAAM;;MAE1B;MACAb,QAAQ,CAAC,CAAC,CAAC;MACXE,SAAS,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAC,CAAC;MACzBR,cAAc,CAAC,IAAI,CAAC;MAEpBkB,UAAU,CAAC,CAAC;IACd,CAAC;IAEDL,GAAG,CAACM,GAAG,GAAGxC,QAAQ;EACpB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACAN,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,QAAQ,EAAE;MACbc,aAAa,CAAC,KAAK,CAAC;MACpBV,YAAY,CAACiB,OAAO,GAAG,IAAI;MAC3B,IAAIV,WAAW,EAAE;QACfmB,UAAU,CAAC,CAAC;MACd;MACA;IACF;IAEA,MAAME,OAAO,GAAG,IAAIN,KAAK,CAAC,CAAC;IAC3BM,OAAO,CAACL,MAAM,GAAG,MAAM;MACrBvB,YAAY,CAACiB,OAAO,GAAGW,OAAO;MAC9BlB,aAAa,CAAC,IAAI,CAAC;MACnB,IAAIH,WAAW,EAAE;QACfmB,UAAU,CAAC,CAAC;MACd;IACF,CAAC;IAEDE,OAAO,CAACC,OAAO,GAAG,MAAM;MACtBC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;MAC1CrB,aAAa,CAAC,KAAK,CAAC;MACpBV,YAAY,CAACiB,OAAO,GAAG,IAAI;IAC7B,CAAC;;IAED;IACAW,OAAO,CAACD,GAAG,GAAG,yBAAyB/B,QAAQ,EAAE;EACnD,CAAC,EAAE,CAACA,QAAQ,EAAEW,WAAW,CAAC,CAAC;EAE3B,MAAMmB,UAAU,GAAG3C,WAAW,CAAC,MAAM;IACnC,MAAMmC,MAAM,GAAGpB,SAAS,CAACmB,OAAO;IAChC,MAAME,GAAG,GAAGD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEE,UAAU,CAAC,IAAI,CAAC;IACpC,MAAMC,GAAG,GAAGtB,QAAQ,CAACkB,OAAO;IAC5B,MAAMW,OAAO,GAAG5B,YAAY,CAACiB,OAAO;IAEpC,IAAI,CAACC,MAAM,IAAI,CAACC,GAAG,IAAI,CAACE,GAAG,EAAE;;IAE7B;IACAF,GAAG,CAACa,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEd,MAAM,CAACM,KAAK,EAAEN,MAAM,CAACO,MAAM,CAAC;;IAEhD;IACAN,GAAG,CAACc,WAAW,GAAG,GAAG;IACrBd,GAAG,CAACe,SAAS,CAACb,GAAG,EAAER,MAAM,CAACE,CAAC,EAAEF,MAAM,CAACG,CAAC,EAAEK,GAAG,CAACG,KAAK,GAAGb,KAAK,EAAEU,GAAG,CAACI,MAAM,GAAGd,KAAK,CAAC;;IAE7E;IACA,IAAIiB,OAAO,IAAIhC,QAAQ,EAAE;MACvBuB,GAAG,CAACc,WAAW,GAAG,GAAG,CAAC,CAAC;MACvBd,GAAG,CAACe,SAAS,CAACN,OAAO,EAAEf,MAAM,CAACE,CAAC,EAAEF,MAAM,CAACG,CAAC,EAAEK,GAAG,CAACG,KAAK,GAAGb,KAAK,EAAEU,GAAG,CAACI,MAAM,GAAGd,KAAK,CAAC;MACjFQ,GAAG,CAACc,WAAW,GAAG,GAAG,CAAC,CAAC;IACzB;;IAEA;IACA7C,WAAW,CAAC+C,OAAO,CAAEC,UAAU,IAAK;MAClC,IAAIA,UAAU,CAACC,IAAI,KAAK,cAAc,EAAE;QACtC,MAAM;UAAEtB,CAAC;UAAEC,CAAC;UAAEQ,KAAK,GAAG,CAAC;UAAEC,MAAM,GAAG;QAAE,CAAC,GAAGW,UAAU,CAACE,WAAW;;QAE9D;QACA,MAAMC,OAAO,GAAG1B,MAAM,CAACE,CAAC,GAAGA,CAAC,GAAGJ,KAAK;QACpC,MAAM6B,OAAO,GAAG3B,MAAM,CAACG,CAAC,GAAGA,CAAC,GAAGL,KAAK;QACpC,MAAM8B,WAAW,GAAGjB,KAAK,GAAGb,KAAK;QACjC,MAAM+B,YAAY,GAAGjB,MAAM,GAAGd,KAAK;;QAEnC;QACAQ,GAAG,CAACwB,WAAW,GAAG,SAAS;QAC3BxB,GAAG,CAACyB,SAAS,GAAG,CAAC;QACjBzB,GAAG,CAAC0B,UAAU,CAACN,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAEC,YAAY,CAAC;;QAE3D;QACAvB,GAAG,CAAC2B,SAAS,GAAG,SAAS;QACzB3B,GAAG,CAAC4B,IAAI,GAAG,YAAY;QACvB5B,GAAG,CAAC6B,QAAQ,CAACZ,UAAU,CAACa,KAAK,EAAEV,OAAO,EAAEC,OAAO,GAAG,CAAC,CAAC;MACtD,CAAC,MAAM,IAAIJ,UAAU,CAACC,IAAI,KAAK,cAAc,IAAID,UAAU,CAACE,WAAW,CAACY,MAAM,EAAE;QAC9E;QACA,MAAMA,MAAM,GAAGd,UAAU,CAACE,WAAW,CAACY,MAAM;QAC5C,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;UACrBhC,GAAG,CAACiC,SAAS,CAAC,CAAC;UACf,MAAMC,UAAU,GAAGH,MAAM,CAAC,CAAC,CAAC;UAC5B/B,GAAG,CAACmC,MAAM,CAACzC,MAAM,CAACE,CAAC,GAAGsC,UAAU,CAACtC,CAAC,GAAGJ,KAAK,EAAEE,MAAM,CAACG,CAAC,GAAGqC,UAAU,CAACrC,CAAC,GAAGL,KAAK,CAAC;UAE5E,KAAK,IAAI4C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,CAACC,MAAM,EAAEI,CAAC,EAAE,EAAE;YACtC,MAAMC,KAAK,GAAGN,MAAM,CAACK,CAAC,CAAC;YACvBpC,GAAG,CAACsC,MAAM,CAAC5C,MAAM,CAACE,CAAC,GAAGyC,KAAK,CAACzC,CAAC,GAAGJ,KAAK,EAAEE,MAAM,CAACG,CAAC,GAAGwC,KAAK,CAACxC,CAAC,GAAGL,KAAK,CAAC;UACpE;UAEAQ,GAAG,CAACuC,SAAS,CAAC,CAAC;UACfvC,GAAG,CAAC2B,SAAS,GAAG,wBAAwB,CAAC,CAAC;UAC1C3B,GAAG,CAACwC,IAAI,CAAC,CAAC;UACVxC,GAAG,CAACwB,WAAW,GAAG,SAAS;UAC3BxB,GAAG,CAACyB,SAAS,GAAG,CAAC;UACjBzB,GAAG,CAACyC,MAAM,CAAC,CAAC;;UAEZ;UACAzC,GAAG,CAAC2B,SAAS,GAAG,SAAS;UACzB3B,GAAG,CAAC4B,IAAI,GAAG,YAAY;UACvB5B,GAAG,CAAC6B,QAAQ,CAACZ,UAAU,CAACa,KAAK,EAAEpC,MAAM,CAACE,CAAC,GAAGsC,UAAU,CAACtC,CAAC,GAAGJ,KAAK,EAAEE,MAAM,CAACG,CAAC,GAAGqC,UAAU,CAACrC,CAAC,GAAGL,KAAK,GAAG,CAAC,CAAC;QACtG;MACF;IACF,CAAC,CAAC;;IAEF;IACAjB,SAAS,CAACyC,OAAO,CAAC,CAAC0B,QAAQ,EAAEC,KAAK,KAAK;MACrC,MAAMvB,OAAO,GAAG1B,MAAM,CAACE,CAAC,GAAG8C,QAAQ,CAAC9C,CAAC,GAAGJ,KAAK;MAC7C,MAAM6B,OAAO,GAAG3B,MAAM,CAACG,CAAC,GAAG6C,QAAQ,CAAC7C,CAAC,GAAGL,KAAK;;MAE7C;MACAQ,GAAG,CAACiC,SAAS,CAAC,CAAC;MACfjC,GAAG,CAAC4C,GAAG,CAACxB,OAAO,EAAEC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGwB,IAAI,CAACC,EAAE,CAAC;MAC5C9C,GAAG,CAAC2B,SAAS,GAAGe,QAAQ,CAACZ,KAAK,KAAK,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC,CAAC;MAC9D9B,GAAG,CAACwC,IAAI,CAAC,CAAC;MACVxC,GAAG,CAACwB,WAAW,GAAG,MAAM;MACxBxB,GAAG,CAACyB,SAAS,GAAG,CAAC;MACjBzB,GAAG,CAACyC,MAAM,CAAC,CAAC;;MAEZ;MACAzC,GAAG,CAAC2B,SAAS,GAAG,MAAM;MACtB3B,GAAG,CAAC4B,IAAI,GAAG,iBAAiB;MAC5B5B,GAAG,CAAC+C,SAAS,GAAG,QAAQ;MACxB/C,GAAG,CAAC6B,QAAQ,CAAC,CAACc,KAAK,GAAG,CAAC,EAAEK,QAAQ,CAAC,CAAC,EAAE5B,OAAO,EAAEC,OAAO,GAAG,CAAC,CAAC;MAC1DrB,GAAG,CAAC+C,SAAS,GAAG,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC;;IAEF;IACAvE,UAAU,CAACwC,OAAO,CAAEiC,SAAS,IAAK;MAChC,MAAM7B,OAAO,GAAG1B,MAAM,CAACE,CAAC,GAAGqD,SAAS,CAACrD,CAAC,GAAGJ,KAAK;MAC9C,MAAM6B,OAAO,GAAG3B,MAAM,CAACG,CAAC,GAAGoD,SAAS,CAACpD,CAAC,GAAGL,KAAK;;MAE9C;MACAQ,GAAG,CAACiC,SAAS,CAAC,CAAC;MACfjC,GAAG,CAAC4C,GAAG,CAACxB,OAAO,EAAEC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGwB,IAAI,CAACC,EAAE,CAAC;MAC5C9C,GAAG,CAAC2B,SAAS,GAAG,sBAAsB,CAAC,CAAC;MACxC3B,GAAG,CAACwC,IAAI,CAAC,CAAC;IACZ,CAAC,CAAC;;IAEF;IACA,IAAItD,WAAW,EAAE;MACf,MAAM;QAAEU,CAAC;QAAEC,CAAC;QAAEQ,KAAK;QAAEC;MAAO,CAAC,GAAGpB,WAAW;MAC3Cc,GAAG,CAACwB,WAAW,GAAG,SAAS;MAC3BxB,GAAG,CAACyB,SAAS,GAAG,CAAC;MACjBzB,GAAG,CAACkD,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACvBlD,GAAG,CAAC0B,UAAU,CAAC9B,CAAC,EAAEC,CAAC,EAAEQ,KAAK,EAAEC,MAAM,CAAC;MACnCN,GAAG,CAACkD,WAAW,CAAC,EAAE,CAAC;IACrB;EACF,CAAC,EAAE,CAACjF,WAAW,EAAEiB,WAAW,EAAEM,KAAK,EAAEE,MAAM,EAAEnB,SAAS,EAAEC,UAAU,EAAEC,QAAQ,CAAC,CAAC;;EAE9E;EACAf,SAAS,CAAC,MAAM;IACd,IAAI0B,WAAW,EAAE;MACfmB,UAAU,CAAC,CAAC;IACd;EACF,CAAC,EAAE,CAACnB,WAAW,EAAEmB,UAAU,CAAC,CAAC;EAE7B,MAAM4C,WAAW,GAAIC,CAAsC,IAAK;IAC9D,MAAMrD,MAAM,GAAGpB,SAAS,CAACmB,OAAO;IAChC,IAAI,CAACC,MAAM,EAAE,OAAO;MAAEH,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IAElC,MAAMwD,IAAI,GAAGtD,MAAM,CAACuD,qBAAqB,CAAC,CAAC;IAC3C,OAAO;MACL1D,CAAC,EAAEwD,CAAC,CAACG,OAAO,GAAGF,IAAI,CAACG,IAAI;MACxB3D,CAAC,EAAEuD,CAAC,CAACK,OAAO,GAAGJ,IAAI,CAACK;IACtB,CAAC;EACH,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAACvC,OAAe,EAAEC,OAAe,KAAK;IAChE,OAAO;MACLzB,CAAC,EAAE,CAACwB,OAAO,GAAG1B,MAAM,CAACE,CAAC,IAAIJ,KAAK;MAC/BK,CAAC,EAAE,CAACwB,OAAO,GAAG3B,MAAM,CAACG,CAAC,IAAIL;IAC5B,CAAC;EACH,CAAC;EAED,MAAMoE,eAAe,GAAIR,CAAsC,IAAK;IAClE,IAAIlF,YAAY,KAAK,cAAc,EAAE;IAErC,MAAM2F,QAAQ,GAAGV,WAAW,CAACC,CAAC,CAAC;IAC/BrE,YAAY,CAAC,IAAI,CAAC;IAClBE,aAAa,CAAC4E,QAAQ,CAAC;IACvB1E,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAM2E,eAAe,GAAIV,CAAsC,IAAK;IAClE,IAAI,CAACtE,SAAS,IAAI,CAACE,UAAU,IAAId,YAAY,KAAK,cAAc,EAAE;IAElE,MAAM2F,QAAQ,GAAGV,WAAW,CAACC,CAAC,CAAC;IAC/B,MAAM/C,KAAK,GAAGwD,QAAQ,CAACjE,CAAC,GAAGZ,UAAU,CAACY,CAAC;IACvC,MAAMU,MAAM,GAAGuD,QAAQ,CAAChE,CAAC,GAAGb,UAAU,CAACa,CAAC;IAExCV,cAAc,CAAC;MACbS,CAAC,EAAES,KAAK,IAAI,CAAC,GAAGrB,UAAU,CAACY,CAAC,GAAGiE,QAAQ,CAACjE,CAAC;MACzCC,CAAC,EAAES,MAAM,IAAI,CAAC,GAAGtB,UAAU,CAACa,CAAC,GAAGgE,QAAQ,CAAChE,CAAC;MAC1CQ,KAAK,EAAEwC,IAAI,CAACkB,GAAG,CAAC1D,KAAK,CAAC;MACtBC,MAAM,EAAEuC,IAAI,CAACkB,GAAG,CAACzD,MAAM;IACzB,CAAC,CAAC;EACJ,CAAC;EAED,MAAM0D,aAAa,GAAIZ,CAAsC,IAAK;IAChE,IAAI,CAACtE,SAAS,IAAI,CAACE,UAAU,IAAI,CAACE,WAAW,IAAIhB,YAAY,KAAK,cAAc,EAAE;;IAElF;IACA,IAAIgB,WAAW,CAACmB,KAAK,GAAG,EAAE,IAAInB,WAAW,CAACoB,MAAM,GAAG,EAAE,EAAE;MACrDvB,YAAY,CAAC,KAAK,CAAC;MACnBE,aAAa,CAAC,IAAI,CAAC;MACnBE,cAAc,CAAC,IAAI,CAAC;MACpB;IACF;;IAEA;IACA,MAAM8E,UAAU,GAAGN,mBAAmB,CAACzE,WAAW,CAACU,CAAC,EAAEV,WAAW,CAACW,CAAC,CAAC;IACpE,MAAMqE,QAAQ,GAAGP,mBAAmB,CAACzE,WAAW,CAACU,CAAC,GAAGV,WAAW,CAACmB,KAAK,EAAEnB,WAAW,CAACW,CAAC,GAAGX,WAAW,CAACoB,MAAM,CAAC;;IAE3G;IACA,MAAMW,UAAU,GAAG;MACjBkD,OAAO,EAAE,eAAe;MACxBjD,IAAI,EAAE,cAAuB;MAC7BC,WAAW,EAAE;QACXvB,CAAC,EAAEiD,IAAI,CAACuB,GAAG,CAACH,UAAU,CAACrE,CAAC,EAAEsE,QAAQ,CAACtE,CAAC,CAAC;QACrCC,CAAC,EAAEgD,IAAI,CAACuB,GAAG,CAACH,UAAU,CAACpE,CAAC,EAAEqE,QAAQ,CAACrE,CAAC,CAAC;QACrCQ,KAAK,EAAEwC,IAAI,CAACkB,GAAG,CAACG,QAAQ,CAACtE,CAAC,GAAGqE,UAAU,CAACrE,CAAC,CAAC;QAC1CU,MAAM,EAAEuC,IAAI,CAACkB,GAAG,CAACG,QAAQ,CAACrE,CAAC,GAAGoE,UAAU,CAACpE,CAAC;MAC5C,CAAC;MACDiC,KAAK,EAAE,QAAQ7D,WAAW,CAAC+D,MAAM,GAAG,CAAC;IACvC,CAAC;IAED7D,kBAAkB,CAAC8C,UAAU,CAAC;;IAE9B;IACAlC,YAAY,CAAC,KAAK,CAAC;IACnBE,aAAa,CAAC,IAAI,CAAC;IACnBE,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMkF,qBAAqB,GAAIjB,CAAsC,IAAK;IACxE,IAAIlF,YAAY,KAAK,QAAQ,EAAE;IAE/B,MAAM2F,QAAQ,GAAGV,WAAW,CAACC,CAAC,CAAC;IAC/B,MAAMkB,QAAQ,GAAGX,mBAAmB,CAACE,QAAQ,CAACjE,CAAC,EAAEiE,QAAQ,CAAChE,CAAC,CAAC;;IAE5D;IACA,MAAM0E,iBAAiB,GAAGtG,WAAW,CAACuG,IAAI,CAACvD,UAAU,IAAI;MACvD,IAAIA,UAAU,CAACC,IAAI,KAAK,cAAc,EAAE;QACtC,MAAM;UAAEtB,CAAC;UAAEC,CAAC;UAAEQ,KAAK,GAAG,CAAC;UAAEC,MAAM,GAAG;QAAE,CAAC,GAAGW,UAAU,CAACE,WAAW;QAC9D,OAAOmD,QAAQ,CAAC1E,CAAC,IAAIA,CAAC,IAAI0E,QAAQ,CAAC1E,CAAC,IAAIA,CAAC,GAAGS,KAAK,IAC1CiE,QAAQ,CAACzE,CAAC,IAAIA,CAAC,IAAIyE,QAAQ,CAACzE,CAAC,IAAIA,CAAC,GAAGS,MAAM;MACpD;MACA,OAAO,KAAK;IACd,CAAC,CAAC;IAEF,IAAIiE,iBAAiB,EAAE;MACrB;MACA5D,OAAO,CAAC8D,GAAG,CAAC,qBAAqB,EAAEF,iBAAiB,CAAC;IACvD;EACF,CAAC;EAED,MAAMG,iBAAiB,GAAItB,CAAsC,IAAK;IACpE,IAAIlF,YAAY,KAAK,QAAQ,EAAE;MAC7BmG,qBAAqB,CAACjB,CAAC,CAAC;IAC1B,CAAC,MAAM,IAAIlF,YAAY,KAAK,WAAW,EAAE;MACvC,MAAM2F,QAAQ,GAAGV,WAAW,CAACC,CAAC,CAAC;MAC/B,MAAMkB,QAAQ,GAAGX,mBAAmB,CAACE,QAAQ,CAACjE,CAAC,EAAEiE,QAAQ,CAAChE,CAAC,CAAC;;MAE5D;MACA,MAAMiC,KAAK,GAAGsB,CAAC,CAACuB,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;MAElChE,OAAO,CAAC8D,GAAG,CAAC,uBAAuB,EAAEH,QAAQ,EAAE,QAAQ,EAAExC,KAAK,CAAC;MAE/D,IAAIxD,eAAe,EAAE;QACnBA,eAAe,CAACgG,QAAQ,EAAExC,KAAK,CAAC;MAClC;IACF;EACF,CAAC;EAED,oBACEhE,OAAA;IAAK8G,KAAK,EAAE;MACVC,OAAO,EAAE,MAAM;MACfC,SAAS,EAAE,MAAM;MACjBC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,GAAG,EAAE;IACP,CAAE;IAAAC,QAAA,gBACApH,OAAA;MAAK8G,KAAK,EAAE;QACVG,OAAO,EAAE,MAAM;QACfI,cAAc,EAAE,YAAY;QAC5BC,UAAU,EAAE;MACd,CAAE;MAAAF,QAAA,eACApH,OAAA;QACEuH,GAAG,EAAE1G,SAAU;QACfiG,KAAK,EAAE;UACLU,MAAM,EAAE,gBAAgB;UACxBC,YAAY,EAAE,KAAK;UACnBC,eAAe,EAAE,MAAM;UACvBC,MAAM,EAAEvH,YAAY,KAAK,cAAc,GAAG,WAAW,GAC7CA,YAAY,KAAK,WAAW,GAAG,SAAS,GAAG,SAAS;UAC5DwH,QAAQ,EAAE,MAAM;UAChBX,OAAO,EAAE;QACX,CAAE;QACFY,WAAW,EAAE/B,eAAgB;QAC7BgC,WAAW,EAAE9B,eAAgB;QAC7B+B,SAAS,EAAE7B,aAAc;QACzB8B,OAAO,EAAEpB;MAAkB;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNpI,OAAA;MAAK8G,KAAK,EAAE;QACV7B,SAAS,EAAE,QAAQ;QACnBoD,KAAK,EAAE,MAAM;QACbX,eAAe,EAAE,MAAM;QACvBX,OAAO,EAAE,SAAS;QAClBU,YAAY,EAAE,KAAK;QACnBD,MAAM,EAAE;MACV,CAAE;MAAAJ,QAAA,gBACApH,OAAA;QAAI8G,KAAK,EAAE;UAAEwB,MAAM,EAAE;QAAe,CAAE;QAAAlB,QAAA,EAAC;MAAkB;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9DpI,OAAA;QAAG8G,KAAK,EAAE;UAAEwB,MAAM,EAAE;QAAe,CAAE;QAAAlB,QAAA,GAAC,iBACrB,eAAApH,OAAA;UAAAoH,QAAA,EAAShH,YAAY,CAACmI,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,WAAW,CAAC;QAAC;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7E,CAAC,EACHhI,YAAY,KAAK,cAAc,iBAC9BJ,OAAA;QAAG8G,KAAK,EAAE;UAAEwB,MAAM,EAAE,GAAG;UAAEG,QAAQ,EAAE,QAAQ;UAAEJ,KAAK,EAAE;QAAO,CAAE;QAAAjB,QAAA,EAAC;MAE9D;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACJ,EACAhI,YAAY,KAAK,WAAW,iBAC3BJ,OAAA;QAAG8G,KAAK,EAAE;UAAEwB,MAAM,EAAE,GAAG;UAAEG,QAAQ,EAAE,QAAQ;UAAEJ,KAAK,EAAE;QAAO,CAAE;QAAAjB,QAAA,EAAC;MAE9D;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACJ,eACDpI,OAAA;QAAG8G,KAAK,EAAE;UAAEwB,MAAM,EAAE,cAAc;UAAEG,QAAQ,EAAE,QAAQ;UAAEJ,KAAK,EAAE;QAAO,CAAE;QAAAjB,QAAA,GAAC,eAC1D,EAACjH,WAAW,CAAC+D,MAAM;MAAA;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxH,EAAA,CA1XIX,WAAuC;AAAAyI,EAAA,GAAvCzI,WAAuC;AA4X7C,eAAeA,WAAW;AAAC,IAAAyI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}