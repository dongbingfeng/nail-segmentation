{"ast":null,"code":"class SAMService {\n  constructor() {\n    this.baseUrl = void 0;\n    this.baseUrl = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n  }\n  async processSegmentation(request) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/sam/segment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      // Transform backend response to match SAMResponse interface\n      return {\n        masks: data.masks || [],\n        success: data.success,\n        error: data.error,\n        processing_time: data.processing_time\n      };\n    } catch (error) {\n      console.error('SAM segmentation request failed:', error);\n      return this.handleSAMError(error);\n    }\n  }\n  async checkSAMHealth() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/sam/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('SAM health check failed:', error);\n      return {\n        status: \"unhealthy\",\n        model_loaded: false,\n        model_type: \"unknown\",\n        device: \"unknown\",\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n  async getModelInfo() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/sam/model-info`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('SAM model info request failed:', error);\n      // Return default values on error\n      return {\n        initialized: false,\n        model_type: \"unknown\",\n        device: \"unknown\",\n        confidence_threshold: 0.5,\n        max_points: 10\n      };\n    }\n  }\n  async initializeModel() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/sam/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('SAM initialization failed:', error);\n      return {\n        message: error instanceof Error ? error.message : 'Initialization failed',\n        success: false\n      };\n    }\n  }\n  handleSAMError(error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n\n    // Categorize errors for user-friendly messages\n    let userMessage = errorMessage;\n    if (errorMessage.includes('HTTP 400')) {\n      userMessage = 'Invalid request. Please check your point selection.';\n    } else if (errorMessage.includes('HTTP 500')) {\n      userMessage = 'SAM processing failed. Try clicking on clearer object boundaries.';\n    } else if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\n      userMessage = 'Connection lost. Check network and retry.';\n    } else if (errorMessage.includes('GPU') || errorMessage.includes('memory')) {\n      userMessage = 'Processing with CPU mode. Performance may be slower.';\n    }\n    return {\n      masks: [],\n      success: false,\n      error: userMessage\n    };\n  }\n\n  // Utility method to test if SAM service is available\n  async isAvailable() {\n    try {\n      const health = await this.checkSAMHealth();\n      return health.status !== \"unhealthy\";\n    } catch {\n      return false;\n    }\n  }\n\n  // Utility method to get a human-readable status\n  async getStatus() {\n    try {\n      const health = await this.checkSAMHealth();\n      if (health.status === \"healthy\") {\n        return `SAM ready (${health.model_type} on ${health.device})`;\n      } else if (health.status === \"loading\") {\n        return \"SAM initializing...\";\n      } else {\n        return `SAM unavailable: ${health.error || 'Unknown error'}`;\n      }\n    } catch {\n      return \"SAM service unreachable\";\n    }\n  }\n}\nexport const samService = new SAMService();","map":{"version":3,"names":["SAMService","constructor","baseUrl","process","env","REACT_APP_API_BASE_URL","processSegmentation","request","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","catch","Error","detail","status","statusText","data","masks","success","error","processing_time","console","handleSAMError","checkSAMHealth","model_loaded","model_type","device","message","getModelInfo","initialized","confidence_threshold","max_points","initializeModel","errorMessage","userMessage","includes","isAvailable","health","getStatus","samService"],"sources":["/Users/dongbingfeng/code/cursor_learn/nail-segmentation/frontend/src/services/samService.ts"],"sourcesContent":["import { SAMRequest, SAMResponse } from '../types/annotations';\nimport { SAMHealthResponse, SAMModelInfo, SAMInitializeResponse } from '../types/sam';\n\nclass SAMService {\n  private baseUrl: string;\n\n  constructor() {\n    this.baseUrl = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n  }\n\n  async processSegmentation(request: SAMRequest): Promise<SAMResponse> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/sam/segment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      // Transform backend response to match SAMResponse interface\n      return {\n        masks: data.masks || [],\n        success: data.success,\n        error: data.error,\n        processing_time: data.processing_time\n      };\n\n    } catch (error) {\n      console.error('SAM segmentation request failed:', error);\n      return this.handleSAMError(error);\n    }\n  }\n\n  async checkSAMHealth(): Promise<SAMHealthResponse> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/sam/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('SAM health check failed:', error);\n      return {\n        status: \"unhealthy\",\n        model_loaded: false,\n        model_type: \"unknown\",\n        device: \"unknown\",\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  async getModelInfo(): Promise<SAMModelInfo> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/sam/model-info`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('SAM model info request failed:', error);\n      // Return default values on error\n      return {\n        initialized: false,\n        model_type: \"unknown\",\n        device: \"unknown\",\n        confidence_threshold: 0.5,\n        max_points: 10\n      };\n    }\n  }\n\n  async initializeModel(): Promise<SAMInitializeResponse> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/sam/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('SAM initialization failed:', error);\n      return {\n        message: error instanceof Error ? error.message : 'Initialization failed',\n        success: false\n      };\n    }\n  }\n\n  private handleSAMError(error: any): SAMResponse {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    \n    // Categorize errors for user-friendly messages\n    let userMessage = errorMessage;\n    \n    if (errorMessage.includes('HTTP 400')) {\n      userMessage = 'Invalid request. Please check your point selection.';\n    } else if (errorMessage.includes('HTTP 500')) {\n      userMessage = 'SAM processing failed. Try clicking on clearer object boundaries.';\n    } else if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\n      userMessage = 'Connection lost. Check network and retry.';\n    } else if (errorMessage.includes('GPU') || errorMessage.includes('memory')) {\n      userMessage = 'Processing with CPU mode. Performance may be slower.';\n    }\n\n    return {\n      masks: [],\n      success: false,\n      error: userMessage\n    };\n  }\n\n  // Utility method to test if SAM service is available\n  async isAvailable(): Promise<boolean> {\n    try {\n      const health = await this.checkSAMHealth();\n      return health.status !== \"unhealthy\";\n    } catch {\n      return false;\n    }\n  }\n\n  // Utility method to get a human-readable status\n  async getStatus(): Promise<string> {\n    try {\n      const health = await this.checkSAMHealth();\n      \n      if (health.status === \"healthy\") {\n        return `SAM ready (${health.model_type} on ${health.device})`;\n      } else if (health.status === \"loading\") {\n        return \"SAM initializing...\";\n      } else {\n        return `SAM unavailable: ${health.error || 'Unknown error'}`;\n      }\n    } catch {\n      return \"SAM service unreachable\";\n    }\n  }\n}\n\nexport const samService = new SAMService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}