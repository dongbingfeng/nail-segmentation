{"ast":null,"code":"/**\n * U-Net API Service\n * Handles communication with the backend U-Net segmentation endpoints\n */\n\nclass UNetService {\n  constructor() {\n    this.baseUrl = void 0;\n    // Use the same base URL pattern as other services\n    this.baseUrl = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:8000/api';\n  }\n\n  /**\n   * Segment an image using the U-Net model\n   * @param request - The segmentation request containing base64 image data\n   * @returns Promise resolving to segmentation response\n   */\n  async segmentImage(request) {\n    try {\n      const response = await fetch(`${this.baseUrl}/unet/segment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n      const result = await response.json();\n      if (!result.success) {\n        var _result$error;\n        throw new Error(((_result$error = result.error) === null || _result$error === void 0 ? void 0 : _result$error.message) || 'Segmentation failed');\n      }\n      return result;\n    } catch (error) {\n      console.error('UNet segmentation error:', error);\n      throw new Error(error instanceof Error ? `Segmentation failed: ${error.message}` : 'Segmentation failed: Unknown error');\n    }\n  }\n\n  /**\n   * Check the health status of the U-Net service\n   * @returns Promise resolving to health status\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseUrl}/unet/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('UNet health check error:', error);\n      throw new Error(error instanceof Error ? `Health check failed: ${error.message}` : 'Health check failed: Unknown error');\n    }\n  }\n\n  /**\n   * Convert an image file to base64 string\n   * @param imageFile - The image file to convert\n   * @returns Promise resolving to base64 string\n   */\n  async imageToBase64(imageFile) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const result = reader.result;\n        // Remove the data URL prefix (e.g., \"data:image/png;base64,\")\n        const base64 = result.split(',')[1];\n        resolve(base64);\n      };\n      reader.onerror = () => reject(new Error('Failed to read image file'));\n      reader.readAsDataURL(imageFile);\n    });\n  }\n\n  /**\n   * Convert an image URL to base64 string\n   * @param imageUrl - The image URL to convert\n   * @returns Promise resolving to base64 string\n   */\n  async imageUrlToBase64(imageUrl) {\n    try {\n      const response = await fetch(imageUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch image: ${response.statusText}`);\n      }\n      const blob = await response.blob();\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const result = reader.result;\n          // Remove the data URL prefix (e.g., \"data:image/png;base64,\")\n          const base64 = result.split(',')[1];\n          resolve(base64);\n        };\n        reader.onerror = () => reject(new Error('Failed to convert image to base64'));\n        reader.readAsDataURL(blob);\n      });\n    } catch (error) {\n      console.error('Image URL to base64 conversion error:', error);\n      throw new Error(error instanceof Error ? `Failed to convert image: ${error.message}` : 'Failed to convert image: Unknown error');\n    }\n  }\n}\n\n// Export singleton instance\nexport const unetService = new UNetService();\nexport default unetService;","map":{"version":3,"names":["UNetService","constructor","baseUrl","process","env","NODE_ENV","segmentImage","request","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","result","json","success","_result$error","error","message","console","checkHealth","statusText","imageToBase64","imageFile","Promise","resolve","reject","reader","FileReader","onload","base64","split","onerror","readAsDataURL","imageUrlToBase64","imageUrl","blob","unetService"],"sources":["/Users/dongbingfeng/code/cursor_learn/nail-segmentation/frontend/src/services/unetService.ts"],"sourcesContent":["/**\n * U-Net API Service\n * Handles communication with the backend U-Net segmentation endpoints\n */\n\nimport { UNetSegmentationRequest, UNetSegmentationResponse, UNetHealthResponse } from '../types/unet';\n\nclass UNetService {\n  private baseUrl: string;\n\n  constructor() {\n    // Use the same base URL pattern as other services\n    this.baseUrl = process.env.NODE_ENV === 'production' \n      ? '/api' \n      : 'http://localhost:8000/api';\n  }\n\n  /**\n   * Segment an image using the U-Net model\n   * @param request - The segmentation request containing base64 image data\n   * @returns Promise resolving to segmentation response\n   */\n  async segmentImage(request: UNetSegmentationRequest): Promise<UNetSegmentationResponse> {\n    try {\n      const response = await fetch(`${this.baseUrl}/unet/segment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const result: UNetSegmentationResponse = await response.json();\n      \n      if (!result.success) {\n        throw new Error(result.error?.message || 'Segmentation failed');\n      }\n\n      return result;\n    } catch (error) {\n      console.error('UNet segmentation error:', error);\n      throw new Error(\n        error instanceof Error \n          ? `Segmentation failed: ${error.message}`\n          : 'Segmentation failed: Unknown error'\n      );\n    }\n  }\n\n  /**\n   * Check the health status of the U-Net service\n   * @returns Promise resolving to health status\n   */\n  async checkHealth(): Promise<UNetHealthResponse> {\n    try {\n      const response = await fetch(`${this.baseUrl}/unet/health`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('UNet health check error:', error);\n      throw new Error(\n        error instanceof Error \n          ? `Health check failed: ${error.message}`\n          : 'Health check failed: Unknown error'\n      );\n    }\n  }\n\n  /**\n   * Convert an image file to base64 string\n   * @param imageFile - The image file to convert\n   * @returns Promise resolving to base64 string\n   */\n  async imageToBase64(imageFile: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const result = reader.result as string;\n        // Remove the data URL prefix (e.g., \"data:image/png;base64,\")\n        const base64 = result.split(',')[1];\n        resolve(base64);\n      };\n      reader.onerror = () => reject(new Error('Failed to read image file'));\n      reader.readAsDataURL(imageFile);\n    });\n  }\n\n  /**\n   * Convert an image URL to base64 string\n   * @param imageUrl - The image URL to convert\n   * @returns Promise resolving to base64 string\n   */\n  async imageUrlToBase64(imageUrl: string): Promise<string> {\n    try {\n      const response = await fetch(imageUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch image: ${response.statusText}`);\n      }\n      \n      const blob = await response.blob();\n      \n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const result = reader.result as string;\n          // Remove the data URL prefix (e.g., \"data:image/png;base64,\")\n          const base64 = result.split(',')[1];\n          resolve(base64);\n        };\n        reader.onerror = () => reject(new Error('Failed to convert image to base64'));\n        reader.readAsDataURL(blob);\n      });\n    } catch (error) {\n      console.error('Image URL to base64 conversion error:', error);\n      throw new Error(\n        error instanceof Error \n          ? `Failed to convert image: ${error.message}`\n          : 'Failed to convert image: Unknown error'\n      );\n    }\n  }\n}\n\n// Export singleton instance\nexport const unetService = new UNetService();\nexport default unetService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}