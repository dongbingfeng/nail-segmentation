{"ast":null,"code":"var _jsxFileName = \"/Users/dongbingfeng/code/cursor_learn/nail-segmentation/frontend/src/components/LabelingInterface.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ImageCanvas from './ImageCanvas';\nimport ToolPalette from './ToolPalette';\nimport { useImageNavigation } from '../contexts/ImageNavigationContext';\nimport { samService } from '../services/samService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LabelingInterface = () => {\n  _s();\n  const [selectedTool, setSelectedTool] = useState('select');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [samPoints, setSamPoints] = useState([]);\n  const [maskPoints, setMaskPoints] = useState([]);\n  const {\n    currentImageData,\n    annotations,\n    updateAnnotations,\n    saveCurrentAnnotations,\n    isLoading,\n    error\n  } = useImageNavigation();\n\n  // No auto-save - annotations are only saved when \"Save Label\" button is clicked\n\n  const handleToolSelect = tool => {\n    setSelectedTool(tool);\n  };\n  const handleAnnotationCreate = async annotationData => {\n    if (!currentImageData) return;\n    try {\n      // Generate temporary ID for now - will be replaced with API response\n      const newAnnotation = {\n        ...annotationData,\n        id: `temp-${Date.now()}`,\n        imageId: currentImageData.id,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      const updatedAnnotations = [...annotations, newAnnotation];\n      updateAnnotations(updatedAnnotations);\n      console.log('Created annotation:', newAnnotation);\n    } catch (err) {\n      console.error('Error creating annotation:', err);\n    }\n  };\n  const handleAnnotationUpdate = async (id, updates) => {\n    try {\n      const updatedAnnotations = annotations.map(annotation => annotation.id === id ? {\n        ...annotation,\n        ...updates,\n        updatedAt: new Date().toISOString()\n      } : annotation);\n      updateAnnotations(updatedAnnotations);\n      console.log('Updated annotation:', id, updates);\n    } catch (err) {\n      console.error('Error updating annotation:', err);\n    }\n  };\n  const handleAnnotationDelete = async id => {\n    try {\n      const updatedAnnotations = annotations.filter(annotation => annotation.id !== id);\n      updateAnnotations(updatedAnnotations);\n      console.log('Deleted annotation:', id);\n    } catch (err) {\n      console.error('Error deleting annotation:', err);\n    }\n  };\n  const handleSamPointClick = (point, label = 1) => {\n    // Add point to SAM points collection\n    setSamPoints(prev => [...prev, {\n      ...point,\n      label\n    }]);\n  };\n  const handleClearSamPoints = () => {\n    setSamPoints([]);\n    setMaskPoints([]);\n  };\n  const handleClearMaskPoints = () => {\n    setMaskPoints([]);\n    // Also remove all bounding box annotations\n    const updatedAnnotations = annotations.filter(annotation => annotation.type !== 'bounding_box');\n    updateAnnotations(updatedAnnotations);\n  };\n  const handleSaveLabel = async () => {\n    if (!currentImageData || maskPoints.length === 0) {\n      console.warn('No image or mask points available to save');\n      return;\n    }\n    try {\n      // Calculate bounding box from mask points\n      const minX = Math.min(...maskPoints.map(p => p.x));\n      const minY = Math.min(...maskPoints.map(p => p.y));\n      const maxX = Math.max(...maskPoints.map(p => p.x));\n      const maxY = Math.max(...maskPoints.map(p => p.y));\n\n      // Create segmentation annotation from mask points\n      const maskAnnotation = {\n        id: `mask-${Date.now()}`,\n        imageId: currentImageData.id,\n        type: 'segmentation',\n        coordinates: {\n          x: minX,\n          y: minY,\n          width: maxX - minX,\n          height: maxY - minY,\n          points: maskPoints.map(p => ({\n            x: p.x,\n            y: p.y\n          }))\n        },\n        label: `mask-label-${annotations.filter(a => a.type === 'segmentation').length + 1}`,\n        confidence: 1.0,\n        // Set high confidence since this is manually saved\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // Add annotation to local state\n      const updatedAnnotations = [...annotations, maskAnnotation];\n      updateAnnotations(updatedAnnotations);\n\n      // Save all annotations to backend\n      await saveCurrentAnnotations(updatedAnnotations);\n\n      // Clear mask points after saving\n      setMaskPoints([]);\n      console.log('Mask points saved as annotation and persisted to backend:', maskAnnotation);\n    } catch (err) {\n      console.error('Error saving mask points as annotation:', err);\n      alert(`Failed to save label: ${err instanceof Error ? err.message : 'Unknown error'}`);\n    }\n  };\n  const handleSamProcess = async () => {\n    if (!currentImageData) {\n      console.warn('No image or SAM points available');\n      return;\n    }\n    if (samPoints.length === 0) {\n      setSamPoints([]);\n    }\n    // Find a bounding box from existing annotations or create a default one\n    let boundingBox = {\n      topLeft: {\n        x: 0,\n        y: 0\n      },\n      bottomRight: {\n        x: currentImageData.width,\n        y: currentImageData.height\n      }\n    };\n\n    // Use the first bounding box annotation if available\n    const bboxAnnotation = annotations.find(ann => ann.type === 'bounding_box');\n    if (bboxAnnotation && bboxAnnotation.coordinates.width && bboxAnnotation.coordinates.height) {\n      boundingBox = {\n        topLeft: {\n          x: bboxAnnotation.coordinates.x,\n          y: bboxAnnotation.coordinates.y\n        },\n        bottomRight: {\n          x: bboxAnnotation.coordinates.x + bboxAnnotation.coordinates.width,\n          y: bboxAnnotation.coordinates.y + bboxAnnotation.coordinates.height\n        }\n      };\n    }\n    setIsProcessing(true);\n    try {\n      console.log('Processing with SAM...', {\n        imageId: currentImageData.id,\n        boundingBox,\n        points: samPoints\n      });\n\n      // Prepare SAM request with new interface\n      const samRequest = {\n        imageId: currentImageData.id,\n        boundingBox,\n        points: samPoints.map(p => ({\n          x: p.x,\n          y: p.y\n        })),\n        labels: samPoints.map(p => p.label)\n      };\n\n      // Call real SAM service\n      const result = await samService.processSegmentation(samRequest);\n      if (result.success) {\n        // Handle mask_points if they exist in the response\n        if (result.mask_points && result.mask_points.length > 0) {\n          setMaskPoints(result.mask_points);\n        } else {\n          setMaskPoints([]); // Clear existing mask points if none received\n        }\n\n        // Convert SAM masks to annotations if they exist\n        if (result.masks.length > 0) {\n          result.masks.forEach((mask, index) => {\n            const samAnnotation = {\n              id: `sam-${Date.now()}-${index}`,\n              imageId: currentImageData.id,\n              type: 'segmentation',\n              coordinates: {\n                x: Math.min(...mask.points.map(p => p.x)),\n                y: Math.min(...mask.points.map(p => p.y)),\n                points: mask.points\n              },\n              label: `sam-nail-${annotations.length + index + 1}`,\n              confidence: mask.confidence,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            };\n            const updatedAnnotations = [...annotations, samAnnotation];\n            updateAnnotations(updatedAnnotations);\n          });\n        }\n\n        // Clear SAM points after successful processing\n        setSamPoints([]);\n        console.log('SAM processing completed successfully');\n      } else {\n        // Clear mask points on failure\n        setMaskPoints([]);\n        console.error('SAM processing failed:', result.error);\n        alert(`SAM processing failed: ${result.error || 'Unknown error'}`);\n      }\n    } catch (err) {\n      console.error('Error processing with SAM:', err);\n      alert(`SAM processing error: ${err instanceof Error ? err.message : 'Unknown error'}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '400px',\n        backgroundColor: '#f5f5f5',\n        borderRadius: '8px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading image...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '2rem',\n        textAlign: 'center',\n        backgroundColor: '#ffebee',\n        color: '#c62828',\n        borderRadius: '8px',\n        border: '1px solid #ef5350'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          padding: '0.5rem 1rem',\n          backgroundColor: '#1976d2',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this);\n  }\n  if (!currentImageData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '2rem',\n        textAlign: 'center',\n        backgroundColor: '#f5f5f5',\n        borderRadius: '8px'\n      },\n      children: \"No image data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      gap: '1rem',\n      padding: '1rem',\n      height: '100vh',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '300px',\n        flexShrink: 0,\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ToolPalette, {\n        selectedTool: selectedTool,\n        onToolSelect: handleToolSelect,\n        onSamProcess: handleSamProcess,\n        onClearSamPoints: handleClearSamPoints,\n        onClearMaskPoints: handleClearMaskPoints,\n        onSaveLabel: handleSaveLabel,\n        isProcessing: isProcessing,\n        samPointsCount: samPoints.length,\n        maskPointsCount: maskPoints.length,\n        boundingBoxCount: annotations.filter(a => a.type === 'bounding_box').length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: '#f8f9fa',\n          borderRadius: '8px',\n          padding: '1rem',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n          flex: 1,\n          minHeight: 0,\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            margin: '0 0 1rem 0',\n            fontSize: '1.1rem',\n            color: '#333'\n          },\n          children: [\"Annotations (\", annotations.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), annotations.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#666',\n            fontSize: '0.9rem',\n            margin: 0\n          },\n          children: \"No annotations yet. Use the tools above to create some.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            overflowY: 'auto',\n            minHeight: 0\n          },\n          children: annotations.map((annotation, index) => {\n            var _annotation$coordinat;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: '0.5rem',\n                marginBottom: '0.5rem',\n                backgroundColor: '#fff',\n                borderRadius: '4px',\n                border: '1px solid #ddd',\n                fontSize: '0.9rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontWeight: 'bold',\n                  marginBottom: '0.25rem'\n                },\n                children: [annotation.type === 'bounding_box' ? '📦' : '🎯', \" \", annotation.label]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: '#666',\n                  fontSize: '0.8rem'\n                },\n                children: [annotation.type === 'bounding_box' ? `${Math.round(annotation.coordinates.x)}, ${Math.round(annotation.coordinates.y)} - ${Math.round(annotation.coordinates.width || 0)}×${Math.round(annotation.coordinates.height || 0)}` : `${((_annotation$coordinat = annotation.coordinates.points) === null || _annotation$coordinat === void 0 ? void 0 : _annotation$coordinat.length) || 0} points`, annotation.confidence && /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\" (conf: \", Math.round(annotation.confidence * 100), \"%)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleAnnotationDelete(annotation.id),\n                style: {\n                  marginTop: '0.25rem',\n                  padding: '0.25rem 0.5rem',\n                  backgroundColor: '#ff4444',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '3px',\n                  fontSize: '0.8rem',\n                  cursor: 'pointer'\n                },\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 19\n              }, this)]\n            }, annotation.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        minWidth: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflow: 'auto',\n          minHeight: 0,\n          border: '1px solid #ddd',\n          borderRadius: '8px',\n          backgroundColor: '#f9f9f9'\n        },\n        children: /*#__PURE__*/_jsxDEV(ImageCanvas, {\n          imageUrl: currentImageData.url,\n          annotations: annotations,\n          selectedTool: selectedTool,\n          onAnnotationCreate: handleAnnotationCreate,\n          onAnnotationUpdate: handleAnnotationUpdate,\n          onAnnotationDelete: handleAnnotationDelete,\n          onSamPointClick: handleSamPointClick,\n          samPoints: samPoints,\n          maskPoints: maskPoints\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '1rem',\n          padding: '0.75rem 1rem',\n          backgroundColor: '#e3f2fd',\n          borderRadius: '6px',\n          border: '1px solid #1976d2',\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            margin: '0 0 0.5rem 0',\n            color: '#1976d2'\n          },\n          children: currentImageData.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: 0,\n            fontSize: '0.9rem',\n            color: '#1565c0'\n          },\n          children: [\"Current tool: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: selectedTool.replace('_', ' ').toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 27\n          }, this), \" | Image: \", currentImageData.width, \"\\xD7\", currentImageData.height, \"px\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n};\n_s(LabelingInterface, \"EEIL0pBRrGp47ZZ7o7Es2UROOMQ=\", false, function () {\n  return [useImageNavigation];\n});\n_c = LabelingInterface;\nexport default LabelingInterface;\nvar _c;\n$RefreshReg$(_c, \"LabelingInterface\");","map":{"version":3,"names":["React","useState","ImageCanvas","ToolPalette","useImageNavigation","samService","jsxDEV","_jsxDEV","LabelingInterface","_s","selectedTool","setSelectedTool","isProcessing","setIsProcessing","samPoints","setSamPoints","maskPoints","setMaskPoints","currentImageData","annotations","updateAnnotations","saveCurrentAnnotations","isLoading","error","handleToolSelect","tool","handleAnnotationCreate","annotationData","newAnnotation","id","Date","now","imageId","createdAt","toISOString","updatedAt","updatedAnnotations","console","log","err","handleAnnotationUpdate","updates","map","annotation","handleAnnotationDelete","filter","handleSamPointClick","point","label","prev","handleClearSamPoints","handleClearMaskPoints","type","handleSaveLabel","length","warn","minX","Math","min","p","x","minY","y","maxX","max","maxY","maskAnnotation","coordinates","width","height","points","a","confidence","alert","Error","message","handleSamProcess","boundingBox","topLeft","bottomRight","bboxAnnotation","find","ann","samRequest","labels","result","processSegmentation","success","mask_points","masks","forEach","mask","index","samAnnotation","style","display","justifyContent","alignItems","backgroundColor","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","padding","textAlign","color","border","onClick","window","location","reload","cursor","gap","overflow","flexShrink","flexDirection","onToolSelect","onSamProcess","onClearSamPoints","onClearMaskPoints","onSaveLabel","samPointsCount","maskPointsCount","boundingBoxCount","boxShadow","flex","minHeight","margin","fontSize","overflowY","_annotation$coordinat","marginBottom","fontWeight","round","marginTop","minWidth","imageUrl","url","onAnnotationCreate","onAnnotationUpdate","onAnnotationDelete","onSamPointClick","filename","replace","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/dongbingfeng/code/cursor_learn/nail-segmentation/frontend/src/components/LabelingInterface.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ImageCanvas from './ImageCanvas';\nimport ToolPalette from './ToolPalette';\nimport { useImageNavigation } from '../contexts/ImageNavigationContext';\nimport { Annotation, SAMRequest } from '../types/annotations';\nimport { samService } from '../services/samService';\n\nconst LabelingInterface: React.FC = () => {\n  const [selectedTool, setSelectedTool] = useState<'select' | 'bounding_box' | 'sam_point'>('select');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [samPoints, setSamPoints] = useState<Array<{x: number, y: number, label: number}>>([]);\n  const [maskPoints, setMaskPoints] = useState<Array<{x: number, y: number}>>([]);\n  \n  const {\n    currentImageData,\n    annotations,\n    updateAnnotations,\n    saveCurrentAnnotations,\n    isLoading,\n    error\n  } = useImageNavigation();\n\n  // No auto-save - annotations are only saved when \"Save Label\" button is clicked\n\n  const handleToolSelect = (tool: string) => {\n    setSelectedTool(tool as 'select' | 'bounding_box' | 'sam_point');\n  };\n\n  const handleAnnotationCreate = async (annotationData: Omit<Annotation, 'id' | 'createdAt' | 'updatedAt'>) => {\n    if (!currentImageData) return;\n    \n    try {\n      // Generate temporary ID for now - will be replaced with API response\n      const newAnnotation: Annotation = {\n        ...annotationData,\n        id: `temp-${Date.now()}`,\n        imageId: currentImageData.id,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n\n      const updatedAnnotations = [...annotations, newAnnotation];\n      updateAnnotations(updatedAnnotations);\n      \n      console.log('Created annotation:', newAnnotation);\n    } catch (err) {\n      console.error('Error creating annotation:', err);\n    }\n  };\n\n  const handleAnnotationUpdate = async (id: string, updates: Partial<Annotation>) => {\n    try {\n      const updatedAnnotations = annotations.map(annotation => \n        annotation.id === id \n          ? { ...annotation, ...updates, updatedAt: new Date().toISOString() }\n          : annotation\n      );\n      \n      updateAnnotations(updatedAnnotations);\n      console.log('Updated annotation:', id, updates);\n    } catch (err) {\n      console.error('Error updating annotation:', err);\n    }\n  };\n\n  const handleAnnotationDelete = async (id: string) => {\n    try {\n      const updatedAnnotations = annotations.filter(annotation => annotation.id !== id);\n      updateAnnotations(updatedAnnotations);\n      \n      console.log('Deleted annotation:', id);\n    } catch (err) {\n      console.error('Error deleting annotation:', err);\n    }\n  };\n\n  const handleSamPointClick = (point: {x: number, y: number}, label: number = 1) => {\n    // Add point to SAM points collection\n    setSamPoints(prev => [...prev, { ...point, label }]);\n  };\n\n  const handleClearSamPoints = () => {\n    setSamPoints([]);\n    setMaskPoints([]);\n  };\n\n  const handleClearMaskPoints = () => {\n    setMaskPoints([]);\n    // Also remove all bounding box annotations\n    const updatedAnnotations = annotations.filter(annotation => annotation.type !== 'bounding_box');\n    updateAnnotations(updatedAnnotations);\n  };\n\n  const handleSaveLabel = async () => {\n    if (!currentImageData || maskPoints.length === 0) {\n      console.warn('No image or mask points available to save');\n      return;\n    }\n\n    try {\n      // Calculate bounding box from mask points\n      const minX = Math.min(...maskPoints.map(p => p.x));\n      const minY = Math.min(...maskPoints.map(p => p.y));\n      const maxX = Math.max(...maskPoints.map(p => p.x));\n      const maxY = Math.max(...maskPoints.map(p => p.y));\n\n      // Create segmentation annotation from mask points\n      const maskAnnotation: Annotation = {\n        id: `mask-${Date.now()}`,\n        imageId: currentImageData.id,\n        type: 'segmentation',\n        coordinates: {\n          x: minX,\n          y: minY,\n          width: maxX - minX,\n          height: maxY - minY,\n          points: maskPoints.map(p => ({ x: p.x, y: p.y }))\n        },\n        label: `mask-label-${annotations.filter(a => a.type === 'segmentation').length + 1}`,\n        confidence: 1.0, // Set high confidence since this is manually saved\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n\n      // Add annotation to local state\n      const updatedAnnotations = [...annotations, maskAnnotation];\n      updateAnnotations(updatedAnnotations);\n\n      // Save all annotations to backend\n      await saveCurrentAnnotations(updatedAnnotations);\n\n      // Clear mask points after saving\n      setMaskPoints([]);\n      \n      console.log('Mask points saved as annotation and persisted to backend:', maskAnnotation);\n    } catch (err) {\n      console.error('Error saving mask points as annotation:', err);\n      alert(`Failed to save label: ${err instanceof Error ? err.message : 'Unknown error'}`);\n    }\n  };\n\n  const handleSamProcess = async () => {\n    if (!currentImageData) {\n      console.warn('No image or SAM points available');\n      return;\n    }\n    if (samPoints.length === 0) {\n      setSamPoints([]);\n    }\n    // Find a bounding box from existing annotations or create a default one\n    let boundingBox = {\n      topLeft: { x: 0, y: 0 },\n      bottomRight: { x: currentImageData.width, y: currentImageData.height }\n    };\n\n    // Use the first bounding box annotation if available\n    const bboxAnnotation = annotations.find(ann => ann.type === 'bounding_box');\n    if (bboxAnnotation && bboxAnnotation.coordinates.width && bboxAnnotation.coordinates.height) {\n      boundingBox = {\n        topLeft: { \n          x: bboxAnnotation.coordinates.x, \n          y: bboxAnnotation.coordinates.y \n        },\n        bottomRight: { \n          x: bboxAnnotation.coordinates.x + bboxAnnotation.coordinates.width,\n          y: bboxAnnotation.coordinates.y + bboxAnnotation.coordinates.height\n        }\n      };\n    }\n\n    setIsProcessing(true);\n    try {\n      console.log('Processing with SAM...', { \n        imageId: currentImageData.id, \n        boundingBox,\n        points: samPoints \n      });\n      \n      // Prepare SAM request with new interface\n      const samRequest: SAMRequest = {\n        imageId: currentImageData.id,\n        boundingBox,\n        points: samPoints.map(p => ({ x: p.x, y: p.y })),\n        labels: samPoints.map(p => p.label)\n      };\n\n      // Call real SAM service\n      const result = await samService.processSegmentation(samRequest);\n      if (result.success) {\n        // Handle mask_points if they exist in the response\n        if (result.mask_points && result.mask_points.length > 0) {\n          setMaskPoints(result.mask_points);\n          \n        } else {\n          setMaskPoints([]); // Clear existing mask points if none received\n        }\n        \n        // Convert SAM masks to annotations if they exist\n        if (result.masks.length > 0) {\n          result.masks.forEach((mask, index) => {\n            const samAnnotation: Annotation = {\n              id: `sam-${Date.now()}-${index}`,\n              imageId: currentImageData.id,\n              type: 'segmentation',\n              coordinates: {\n                x: Math.min(...mask.points.map(p => p.x)),\n                y: Math.min(...mask.points.map(p => p.y)),\n                points: mask.points,\n              },\n              label: `sam-nail-${annotations.length + index + 1}`,\n              confidence: mask.confidence,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString(),\n            };\n            \n            const updatedAnnotations = [...annotations, samAnnotation];\n            updateAnnotations(updatedAnnotations);\n          });\n        }\n\n        // Clear SAM points after successful processing\n        setSamPoints([]);\n        console.log('SAM processing completed successfully');\n      } else {\n        // Clear mask points on failure\n        setMaskPoints([]);\n        console.error('SAM processing failed:', result.error);\n        alert(`SAM processing failed: ${result.error || 'Unknown error'}`);\n      }\n    } catch (err) {\n      console.error('Error processing with SAM:', err);\n      alert(`SAM processing error: ${err instanceof Error ? err.message : 'Unknown error'}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '400px',\n        backgroundColor: '#f5f5f5',\n        borderRadius: '8px'\n      }}>\n        <div>Loading image...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ \n        padding: '2rem', \n        textAlign: 'center',\n        backgroundColor: '#ffebee',\n        color: '#c62828',\n        borderRadius: '8px',\n        border: '1px solid #ef5350'\n      }}>\n        <h3>Error</h3>\n        <p>{error}</p>\n        <button \n          onClick={() => window.location.reload()}\n          style={{\n            padding: '0.5rem 1rem',\n            backgroundColor: '#1976d2',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  if (!currentImageData) {\n    return (\n      <div style={{ \n        padding: '2rem', \n        textAlign: 'center',\n        backgroundColor: '#f5f5f5',\n        borderRadius: '8px'\n      }}>\n        No image data available\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ \n      display: 'flex', \n      gap: '1rem', \n      padding: '1rem',\n      height: '100vh',\n      overflow: 'hidden'\n    }}>\n      {/* Left Panel - Tools */}\n      <div style={{ \n        width: '300px', \n        flexShrink: 0,\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%'\n      }}>\n        <ToolPalette\n          selectedTool={selectedTool}\n          onToolSelect={handleToolSelect}\n          onSamProcess={handleSamProcess}\n          onClearSamPoints={handleClearSamPoints}\n          onClearMaskPoints={handleClearMaskPoints}\n          onSaveLabel={handleSaveLabel}\n          isProcessing={isProcessing}\n          samPointsCount={samPoints.length}\n          maskPointsCount={maskPoints.length}\n          boundingBoxCount={annotations.filter(a => a.type === 'bounding_box').length}\n        />\n        \n        {/* Annotations List */}\n        <div style={{\n          backgroundColor: '#f8f9fa',\n          borderRadius: '8px',\n          padding: '1rem',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n          flex: 1,\n          minHeight: 0,\n          display: 'flex',\n          flexDirection: 'column'\n        }}>\n          <h3 style={{ \n            margin: '0 0 1rem 0', \n            fontSize: '1.1rem', \n            color: '#333' \n          }}>\n            Annotations ({annotations.length})\n          </h3>\n          \n          {annotations.length === 0 ? (\n            <p style={{ \n              color: '#666', \n              fontSize: '0.9rem',\n              margin: 0 \n            }}>\n              No annotations yet. Use the tools above to create some.\n            </p>\n          ) : (\n            <div style={{ \n              flex: 1,\n              overflowY: 'auto',\n              minHeight: 0\n            }}>\n              {annotations.map((annotation, index) => (\n                <div \n                  key={annotation.id}\n                  style={{\n                    padding: '0.5rem',\n                    marginBottom: '0.5rem',\n                    backgroundColor: '#fff',\n                    borderRadius: '4px',\n                    border: '1px solid #ddd',\n                    fontSize: '0.9rem'\n                  }}\n                >\n                  <div style={{ fontWeight: 'bold', marginBottom: '0.25rem' }}>\n                    {annotation.type === 'bounding_box' ? '📦' : '🎯'} {annotation.label}\n                  </div>\n                  <div style={{ color: '#666', fontSize: '0.8rem' }}>\n                    {annotation.type === 'bounding_box' \n                      ? `${Math.round(annotation.coordinates.x)}, ${Math.round(annotation.coordinates.y)} - ${Math.round(annotation.coordinates.width || 0)}×${Math.round(annotation.coordinates.height || 0)}`\n                      : `${annotation.coordinates.points?.length || 0} points`\n                    }\n                    {annotation.confidence && (\n                      <span> (conf: {Math.round(annotation.confidence * 100)}%)</span>\n                    )}\n                  </div>\n                  <button\n                    onClick={() => handleAnnotationDelete(annotation.id)}\n                    style={{\n                      marginTop: '0.25rem',\n                      padding: '0.25rem 0.5rem',\n                      backgroundColor: '#ff4444',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '3px',\n                      fontSize: '0.8rem',\n                      cursor: 'pointer'\n                    }}\n                  >\n                    Delete\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Right Panel - Canvas */}\n      <div style={{ \n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        minWidth: 0\n      }}>\n        <div style={{\n          flex: 1,\n          overflow: 'auto',\n          minHeight: 0,\n          border: '1px solid #ddd',\n          borderRadius: '8px',\n          backgroundColor: '#f9f9f9'\n        }}>\n          <ImageCanvas\n            imageUrl={currentImageData.url}\n            annotations={annotations}\n            selectedTool={selectedTool}\n            onAnnotationCreate={handleAnnotationCreate}\n            onAnnotationUpdate={handleAnnotationUpdate}\n            onAnnotationDelete={handleAnnotationDelete}\n            onSamPointClick={handleSamPointClick}\n            samPoints={samPoints}\n            maskPoints={maskPoints}\n          />\n        </div>\n        <div style={{ \n          marginBottom: '1rem',\n          padding: '0.75rem 1rem',\n          backgroundColor: '#e3f2fd',\n          borderRadius: '6px',\n          border: '1px solid #1976d2',\n          flexShrink: 0\n        }}>\n          <h2 style={{ margin: '0 0 0.5rem 0', color: '#1976d2' }}>\n            {currentImageData.filename}\n          </h2>\n          <p style={{ margin: 0, fontSize: '0.9rem', color: '#1565c0' }}>\n            Current tool: <strong>{selectedTool.replace('_', ' ').toUpperCase()}</strong> | Image: {currentImageData.width}×{currentImageData.height}px\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LabelingInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}