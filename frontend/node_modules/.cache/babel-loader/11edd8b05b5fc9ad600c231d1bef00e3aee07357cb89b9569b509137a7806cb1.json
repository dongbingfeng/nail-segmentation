{"ast":null,"code":"class ImageService {\n  constructor() {\n    this.baseUrl = void 0;\n    // Default to same origin, can be configured for different environments\n    this.baseUrl = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n  }\n  async fetchImageList() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/images`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch image list: ${response.status} ${response.statusText}`);\n      }\n      const images = await response.json();\n      return images;\n    } catch (error) {\n      console.error('Error fetching image list:', error);\n      throw new Error(`Failed to fetch image list: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  async fetchImageAnnotations(imageId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/images/${imageId}/annotations`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch annotations for image ${imageId}: ${response.status} ${response.statusText}`);\n      }\n      const annotations = await response.json();\n      return annotations;\n    } catch (error) {\n      console.error(`Error fetching annotations for image ${imageId}:`, error);\n      throw new Error(`Failed to fetch annotations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  async saveImageAnnotations(imageId, annotations) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/images/${imageId}/annotations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(annotations)\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to save annotations for image ${imageId}: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      console.log(`Saved ${result.count} annotations for image ${imageId}`);\n    } catch (error) {\n      console.error(`Error saving annotations for image ${imageId}:`, error);\n      throw new Error(`Failed to save annotations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  async fetchLabelingProgress() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/labeling/progress`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch labeling progress: ${response.status} ${response.statusText}`);\n      }\n      const progress = await response.json();\n      return progress;\n    } catch (error) {\n      console.error('Error fetching labeling progress:', error);\n      throw new Error(`Failed to fetch labeling progress: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  async updateProgressIndex(currentIndex) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/labeling/progress/${currentIndex}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to update progress index: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      console.log(`Updated progress index to ${result.currentIndex}`);\n    } catch (error) {\n      console.error('Error updating progress index:', error);\n      throw new Error(`Failed to update progress index: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Health check method to verify backend connectivity\n  async healthCheck() {\n    try {\n      const response = await fetch(`${this.baseUrl}/health`);\n      return response.ok;\n    } catch (error) {\n      console.error('Backend health check failed:', error);\n      return false;\n    }\n  }\n\n  // Method to handle network errors gracefully\n  async handleResponse(response) {\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n      try {\n        const errorBody = await response.json();\n        if (errorBody.detail) {\n          errorMessage = errorBody.detail;\n        }\n      } catch {\n        // If we can't parse error body, use default message\n      }\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  }\n}\n\n// Create and export singleton instance\nexport const imageService = new ImageService();\n\n// Export types for use in other modules","map":{"version":3,"names":["ImageService","constructor","baseUrl","process","env","REACT_APP_API_BASE_URL","fetchImageList","response","fetch","ok","Error","status","statusText","images","json","error","console","message","fetchImageAnnotations","imageId","annotations","saveImageAnnotations","method","headers","body","JSON","stringify","result","log","count","fetchLabelingProgress","progress","updateProgressIndex","currentIndex","healthCheck","handleResponse","errorMessage","errorBody","detail","imageService"],"sources":["/Users/dongbingfeng/code/cursor_learn/nail-segmentation/frontend/src/services/imageService.ts"],"sourcesContent":["import { Annotation } from '../types/annotations';\n\ninterface ImageMetadata {\n  id: string;\n  filename: string;\n  url: string;\n  width: number;\n  height: number;\n  isCompleted: boolean;\n  annotationCount: number;\n  lastModified: string;\n}\n\ninterface ProgressStatus {\n  totalImages: number;\n  completedImages: number;\n  currentImageIndex: number;\n  percentComplete: number;\n}\n\nclass ImageService {\n  private baseUrl: string;\n\n  constructor() {\n    // Default to same origin, can be configured for different environments\n    this.baseUrl = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n  }\n\n  async fetchImageList(): Promise<ImageMetadata[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/images`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch image list: ${response.status} ${response.statusText}`);\n      }\n\n      const images = await response.json();\n      return images;\n    } catch (error) {\n      console.error('Error fetching image list:', error);\n      throw new Error(`Failed to fetch image list: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async fetchImageAnnotations(imageId: string): Promise<Annotation[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/images/${imageId}/annotations`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch annotations for image ${imageId}: ${response.status} ${response.statusText}`);\n      }\n\n      const annotations = await response.json();\n      return annotations;\n    } catch (error) {\n      console.error(`Error fetching annotations for image ${imageId}:`, error);\n      throw new Error(`Failed to fetch annotations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async saveImageAnnotations(imageId: string, annotations: Annotation[]): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/images/${imageId}/annotations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(annotations),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to save annotations for image ${imageId}: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      console.log(`Saved ${result.count} annotations for image ${imageId}`);\n    } catch (error) {\n      console.error(`Error saving annotations for image ${imageId}:`, error);\n      throw new Error(`Failed to save annotations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async fetchLabelingProgress(): Promise<ProgressStatus> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/labeling/progress`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch labeling progress: ${response.status} ${response.statusText}`);\n      }\n\n      const progress = await response.json();\n      return progress;\n    } catch (error) {\n      console.error('Error fetching labeling progress:', error);\n      throw new Error(`Failed to fetch labeling progress: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async updateProgressIndex(currentIndex: number): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/labeling/progress/${currentIndex}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update progress index: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      console.log(`Updated progress index to ${result.currentIndex}`);\n    } catch (error) {\n      console.error('Error updating progress index:', error);\n      throw new Error(`Failed to update progress index: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Health check method to verify backend connectivity\n  async healthCheck(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/health`);\n      return response.ok;\n    } catch (error) {\n      console.error('Backend health check failed:', error);\n      return false;\n    }\n  }\n\n  // Method to handle network errors gracefully\n  private async handleResponse(response: Response): Promise<any> {\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n      \n      try {\n        const errorBody = await response.json();\n        if (errorBody.detail) {\n          errorMessage = errorBody.detail;\n        }\n      } catch {\n        // If we can't parse error body, use default message\n      }\n      \n      throw new Error(errorMessage);\n    }\n\n    return await response.json();\n  }\n}\n\n// Create and export singleton instance\nexport const imageService = new ImageService();\n\n// Export types for use in other modules\nexport type { ImageMetadata, ProgressStatus }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}